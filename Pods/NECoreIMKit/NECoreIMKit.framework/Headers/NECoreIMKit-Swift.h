
#if defined(__arm64__) && __arm64__ || (__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef NECOREIMKIT_SWIFT_H
#define NECOREIMKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import NIMSDK;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NECoreIMKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC11NECoreIMKit16AddFriendRequest")
@interface AddFriendRequest : NSObject
@property (nonatomic, copy) NSString * _Nonnull account;
@property (nonatomic, copy) NSString * _Nullable meassage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NIMSession;
@class NIMStickTopSessionInfo;
@protocol ChatExtendProviderDelegate;
@class NIMRecentSession;
@class NIMAddStickTopSessionParams;
@class NSError;
@class NIMAddCollectParams;
@class NIMCollectInfo;
@class NIMMessage;
@class NIMMessagePinItem;
@class NIMChatExtendBasicInfo;
@class NIMSyncStickTopSessionResponse;

SWIFT_CLASS("_TtC11NECoreIMKit18ChatExtendProvider")
@interface ChatExtendProvider : NSObject <NIMChatExtendManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChatExtendProvider * _Nonnull shared;)
+ (ChatExtendProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nonnull stickTopInfos;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addDelegateWithDelegate:(id <ChatExtendProviderDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <ChatExtendProviderDelegate> _Nonnull)delegate;
/// 根据置顶信息排序最近会话
/// \param recentSessions 需要排序的置顶会话
///
/// \param stickTopInfos [会话：置顶信息] 映射
///
///
/// returns:
/// 排序后的最近会话列表，若传如可变数组，则返回其数组本身
- (NSArray<NIMRecentSession *> * _Nonnull)sortRecentSessionsWithRecentSessions:(NSArray<NIMRecentSession *> * _Nonnull)recentSessions stickTopInfos:(NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nonnull)stickTopInfos SWIFT_WARN_UNUSED_RESULT;
/// 添加置顶
/// \param params 添加置顶的参数
///
/// \param completion 回调
///
- (void)addStickTopSessionWithParams:(NIMAddStickTopSessionParams * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 删除置顶
/// \param params 删除置顶参数
///
/// \param completion 回调
///
- (void)removeStickTopSessionWithParams:(NIMStickTopSessionInfo * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 查找所有的置顶记录
/// \param completion 完成回调
///
- (void)loadStickTopSessionInfos:(void (^ _Nonnull)(NSError * _Nullable, NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nullable))completion;
/// 查询某个会话的置顶信息
/// \param session 需要查询的会话
///
///
/// returns:
/// 置顶信息
- (NIMStickTopSessionInfo * _Nullable)stickTopInfoForSessionWithSession:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 获取置顶信息
///
/// returns:
/// 返回置顶信息
- (NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nullable)getStickTopInfos SWIFT_WARN_UNUSED_RESULT;
/// 根据sessionId，判断是否为置顶消息
/// \param sessionId P2P为userId，team时为teamId
///
///
/// returns:
/// 是否是置顶会话
- (BOOL)isStickTopInfoWithSessionId:(NSString * _Nonnull)sessionId SWIFT_WARN_UNUSED_RESULT;
- (void)addCollection:(NIMAddCollectParams * _Nonnull)info :(void (^ _Nonnull)(NSError * _Nullable, NIMCollectInfo * _Nullable))completion;
- (void)reply:(NIMMessage * _Nonnull)message :(NIMMessage * _Nonnull)target :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)pin:(NIMMessagePinItem * _Nonnull)pinItem :(void (^ _Nonnull)(NSError * _Nullable, NIMMessagePinItem * _Nullable))completion;
- (void)removePin:(NIMMessagePinItem * _Nonnull)pinItem :(void (^ _Nonnull)(NSError * _Nullable, NIMMessagePinItem * _Nullable))completion;
- (NIMMessagePinItem * _Nullable)pinItem:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)fetchHistoryMessages:(NSArray<NIMChatExtendBasicInfo *> * _Nonnull)infos :(BOOL)syncToDB :(void (^ _Nonnull)(NSError * _Nullable, NSMapTable<NIMChatExtendBasicInfo *, NIMMessage *> * _Nullable))completion;
- (void)onNotifySyncStickTopSessions:(NIMSyncStickTopSessionResponse * _Nonnull)response;
- (NIMStickTopSessionInfo * _Nonnull)getTopSessionInfo:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 根据 session 获取 pin 消息列表
/// \param session 会话 session
///
/// \param completion 完成回调
///
- (void)fetchPinMessage:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessagePinItem *> * _Nullable))completion;
- (void)onNotifyAddStickTopSession:(NIMStickTopSessionInfo * _Nonnull)newInfo;
- (void)onNotifyRemoveStickTopSession:(NIMStickTopSessionInfo * _Nonnull)removedInfo;
- (void)onNotifyAddMessagePin:(NIMMessagePinItem * _Nonnull)item;
- (void)onNotifyUpdateMessagePin:(NIMMessagePinItem * _Nonnull)item;
- (void)onNotifyRemoveMessagePin:(NIMMessagePinItem * _Nonnull)item;
@end


SWIFT_PROTOCOL("_TtP11NECoreIMKit26ChatExtendProviderDelegate_")
@protocol ChatExtendProviderDelegate <NSObject>
@optional
- (void)onNotifySyncStickTopSessions:(NIMSyncStickTopSessionResponse * _Nonnull)response;
- (void)onNotifyAddStickTopSession:(NIMStickTopSessionInfo * _Nonnull)newInfo;
- (void)onNotifyRemoveStickTopSession:(NIMStickTopSessionInfo * _Nonnull)removedInfo;
- (void)onNotifyAddMessagePinWithPinItem:(NIMMessagePinItem * _Nonnull)pinItem;
- (void)onNotifyRemoveMessagePinWithPinItem:(NIMMessagePinItem * _Nonnull)pinItem;
@end

@protocol NIMChatManagerDelegate;
@class NIMMessageReceipt;

SWIFT_CLASS("_TtC11NECoreIMKit12ChatProvider")
@interface ChatProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChatProvider * _Nonnull shared;)
+ (ChatProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)addDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
- (void)sendMessageWithMessage:(NIMMessage * _Nonnull)message session:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)getMessageHistoryWithSession:(NIMSession * _Nonnull)session message:(NIMMessage * _Nullable)message limit:(NSUInteger)limit :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
- (void)markReadWithParam:(NIMMessageReceipt * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)markReadInTeamWithParam:(NSArray<NIMMessageReceipt *> * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessageReceipt *> * _Nullable))completion;
- (NSError * _Nullable)resendMessageWithMessage:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)revokeMessageWithMessage:(NIMMessage * _Nonnull)message :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)fetchMessageAttachment:(NIMMessage * _Nonnull)message :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)downLoad:(NSString * _Nonnull)urlString :(NSString * _Nonnull)filePath :(NIMHttpProgressBlock _Nullable)progress :(NIMDownloadCompleteBlock _Nullable)completion;
- (void)cancelTaskWithFilepath:(NSString * _Nonnull)filepath;
- (NIMMessage * _Nullable)makeForwardMessage:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)sendForwardMessage:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session;
- (void)forwardMessage:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session;
- (void)refreshReceipts:(NSArray<NIMMessage *> * _Nonnull)messages;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NIMChatroomManagerDelegate;
@class NIMChatroomEnterRequest;
@class NIMChatroomTagsUpdate;
@class NIMChatroomMemberRequest;
@class NIMChatroomMemberInfoUpdateRequest;

SWIFT_CLASS("_TtC11NECoreIMKit16ChatroomProvider")
@interface ChatroomProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChatroomProvider * _Nonnull shared;)
+ (ChatroomProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加通知对象
/// \param delegate 通知对象
///
- (void)addDelegateWithDelegate:(id <NIMChatroomManagerDelegate> _Nonnull)delegate;
/// 移除通知对象
/// \param delegate 通知对象
///
- (void)removeDelegateWithDelegate:(id <NIMChatroomManagerDelegate> _Nonnull)delegate;
/// 进入聊天室
/// \param request 进入聊天室请求
///
/// \param completion 进入完成后的回调
///
- (void)enterChatroomWithRequest:(NIMChatroomEnterRequest * _Nonnull)request completion:(NIMChatroomEnterHandler _Nullable)completion;
/// 离开聊天室
/// \param roomId 聊天室ID
///
/// \param completion 离开聊天室的回调
///
- (void)exitChatroomWithRoomId:(NSString * _Nonnull)roomId completion:(NIMChatroomHandler _Nullable)completion;
/// 更新标签
/// \param tags 标签
///
/// \param completion 请求完成回调
///
- (void)updateTagsWithTags:(NIMChatroomTagsUpdate * _Nonnull)tags completion:(NIMChatroomHandler _Nullable)completion;
/// 获取聊天室成员
/// \param request 获取成员请求
///
/// \param completion 请求完成回调
///
- (void)fetchChatroomMembersWithRequest:(NIMChatroomMemberRequest * _Nonnull)request completion:(NIMChatroomMembersHandler _Nullable)completion;
/// 修改自己在聊天室内的个人信息
/// \param request 个人信息更新请求
///
/// \param completion 修改完成后的回调
///
- (void)updateMyChatroomMemberInfoWithRequest:(NIMChatroomMemberInfoUpdateRequest * _Nonnull)request completion:(NIMChatroomHandler _Nullable)completion;
@end


SWIFT_CLASS("_TtC11NECoreIMKit12ConfigCenter")
@interface ConfigCenter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConfigCenter * _Nonnull shared;)
+ (ConfigCenter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic) BOOL teamEnable;
@end

@protocol NIMConversationManagerDelegate;
@class NIMFetchServerSessionOption;
@class NIMDeleteRecentSessionOption;
@class NIMIncompleteSessionInfo;
@class NIMImportedRecentSession;
@class NIMMessageSearchOption;
@class NIMHistoryMessageSearchOption;
@class NIMGetMessagesDynamicallyParam;

SWIFT_CLASS("_TtC11NECoreIMKit20ConversationProvider")
@interface ConversationProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConversationProvider * _Nonnull shared;)
+ (ConversationProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
/// 获取所有最近会话
- (NSArray<NIMRecentSession *> * _Nullable)getAllRecentSessions SWIFT_WARN_UNUSED_RESULT;
/// 从服务端分页获取历史会话列表
/// \param option 分页查询选项，可为空，空时默认全量获取
///
/// \param completion 完成回调
///
- (void)fetchServerSessionsWithOption:(NIMFetchServerSessionOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMRecentSession *> * _Nullable))completion;
/// 删除某个最近会话
/// \param params 参数
///
/// \param option 选项
///
/// \param completion 回调
///
- (void)deleteRecentConversation:(NIMRecentSession * _Nonnull)params :(NIMDeleteRecentSessionOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 删除服务器端最近会话
/// \param rencentSession 会话参数
///
/// \param option 选择
///
/// \param completion 回调
///
- (void)deleteServerSessions:(NSArray<NIMSession *> * _Nonnull)sessions :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 删除某个最近会话
- (void)deleteRecentSession:(NIMRecentSession * _Nonnull)recentSession;
- (NIMSession * _Nonnull)createRecentTeamSession:(NSString * _Nonnull)teamid SWIFT_WARN_UNUSED_RESULT;
- (void)markReadInSession:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 查询漫游消息未完整会话信息
/// @param session 目标会话
/// @param completion 结果完成回调
- (void)incompleteSessionInfoWithSession:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMIncompleteSessionInfo *> * _Nullable))completion;
/// 更新未漫游完整会话列表
/// \param messages 消息对象
///
/// \param completion 完成回调
///
- (void)updateIncompleteSessionsWithMessages:(NSArray<NIMMessage *> * _Nonnull)messages :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMImportedRecentSession *> * _Nullable))completion;
/// 获取所有未读数
/// \param notify 是否需要通知
///
///
/// returns:
/// 返回未读数
- (NSInteger)allUnreadCountWithNotify:(BOOL)notify SWIFT_WARN_UNUSED_RESULT;
/// 设置所有会话消息为已读
- (void)markAllMessagesRead;
/// 删除本地消息
- (void)deleteMessageWithMessage:(NIMMessage * _Nonnull)message;
/// 从服务端删除
- (void)deleteServerMessageWithMessage:(NIMMessage * _Nonnull)message ext:(NSString * _Nullable)ext :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)onMarkMessageReadCompleteIn:(NIMSession * _Nonnull)session error:(NSError * _Nullable)error;
- (void)searchMessages:(NIMSession * _Nonnull)session option:(NIMMessageSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
- (NSArray<NIMMessage *> * _Nullable)messagesInSession:(NIMSession * _Nonnull)session messageIds:(NSArray<NSString *> * _Nonnull)messageIds SWIFT_WARN_UNUSED_RESULT;
/// 从服务器上获取一个会话里某条消息之前的若干条的消息
/// \param session 消息所属的会话
///
/// \param option 搜索选项
///
/// \param completion 回调
///
- (void)fetchMessageHistoryWithSession:(NIMSession * _Nonnull)session option:(NIMHistoryMessageSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
/// 保存消息到本地
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     message: 消息对象
///   </li>
///   <li>
///     session: 会话
///   </li>
/// </ul>
- (void)saveMessageToDB:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 动态途径获取消息，默认回调错误码403，动态能力需要开通功能，并在同步完成后生效
/// @param param
/// @param completion 完成后的回调
- (void)getMessagesDynamically:(NIMGetMessagesDynamicallyParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, BOOL, NSArray<NIMMessage *> * _Nullable))completion;
@end

@protocol FriendProviderDelegate;
@class NIMUser;
@class User;
@class NIMUserSearchOption;

SWIFT_CLASS("_TtC11NECoreIMKit14FriendProvider")
@interface FriendProvider : NSObject <NIMUserManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FriendProvider * _Nonnull shared;)
+ (FriendProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
/// 返回我的好友列表
///
/// returns:
/// 好友列表
- (NSArray<NIMUser *> * _Nullable)myFriends SWIFT_WARN_UNUSED_RESULT;
/// 获取好友信息
/// fetch: 是否直接从远端拉取
/// myFriends: 需要获取信息的好友列表
///
/// returns:
/// 好友列表
- (void)getMyFriends:(BOOL)fetch :(NSArray<NIMUser *> * _Nullable)myFriends :(void (^ _Nonnull)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
/// 获取好友列表（废弃）
/// fetch: 是否直接从远端拉取
///
/// returns:
/// 好友列表
- (void)getMyFriends:(BOOL)fetch :(void (^ _Nonnull)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
/// 从云信服务器批量获取用户资料，返回系统类型的用户信息(NIMUser)
/// \param accids 用户id集合
///
/// \param completion 成功回调
///
- (void)fetchUserInfo:(NSArray<NSString *> * _Nonnull)accids :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMUser *> * _Nullable))completion;
- (void)getUserInfoAdvancedWithUserIds:(NSArray<NSString *> * _Nonnull)userIds :(void (^ _Nonnull)(NSArray<User *> * _Nonnull, NSError * _Nullable))completion;
- (void)addFriendWithRequest:(AddFriendRequest * _Nonnull)request :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// deleteFiend
/// \param account account of user
///
- (void)deleteFriendWithAccount:(NSString * _Nonnull)account :(BOOL)deleteAlias :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (BOOL)isFriendWithAccount:(NSString * _Nonnull)account SWIFT_WARN_UNUSED_RESULT;
- (void)updateUser:(User * _Nonnull)user :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// remove from black list
- (void)removeFromBlackListWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// add black list
- (void)addBlackListWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// add black list
- (BOOL)isBlackWithAccount:(NSString * _Nonnull)account SWIFT_WARN_UNUSED_RESULT;
- (BOOL)notifyWithUserId:(NSString * _Nullable)userId SWIFT_WARN_UNUSED_RESULT;
- (void)updateNotifyState:(NSString * _Nonnull)userId :(BOOL)notify :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 查找成员
/// \param option 查询条件
///
/// \param completion 完成回调
///
- (void)searchUserWithOption:(NIMUserSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMUser *> * _Nullable))completion;
- (void)onFriendChanged:(NIMUser * _Nonnull)user;
- (void)onBlackListChanged;
- (void)onUserInfoChanged:(NIMUser * _Nonnull)user;
@end


SWIFT_PROTOCOL("_TtP11NECoreIMKit22FriendProviderDelegate_")
@protocol FriendProviderDelegate <NSObject>
- (void)onFriendChangedWithUser:(User * _Nonnull)user;
- (void)onUserInfoChangedWithUser:(User * _Nonnull)user;
- (void)onBlackListChanged;
@end

typedef SWIFT_ENUM(NSInteger, Gender, open) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};

@class NIMSDKOption;
@class NIMServerSetting;
@class NIMSDKConfig;
@class NIMAutoLoginData;
@class NSData;
@protocol IUserInfoDelegate;
@class SettingRepo;

SWIFT_CLASS("_TtC11NECoreIMKit11IMKitClient")
@interface IMKitClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IMKitClient * _Nonnull instance;)
+ (IMKitClient * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 初始化 IM
/// \param option 注册选项
///
- (void)setupCoreKitIM:(NIMSDKOption * _Nonnull)option;
/// 获取NIMSDK版本号
- (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// 获取 AppKey
///
/// returns:
/// 返回当前注册的AppKey
- (NSString * _Nonnull)appKey SWIFT_WARN_UNUSED_RESULT;
/// 查询当前登录的帐号（accid）
- (NSString * _Nonnull)imAccid SWIFT_WARN_UNUSED_RESULT;
/// 当前是否已登录
///
/// returns:
/// true已登录，false未登录
- (BOOL)isLogined SWIFT_WARN_UNUSED_RESULT;
/// 是否初始化
///
/// returns:
/// true 初始化  false 未初始化
- (BOOL)isInit SWIFT_WARN_UNUSED_RESULT;
/// 是否是自己
/// \param accid 账户id
///
///
/// returns:
/// 是否是自己
- (BOOL)isMySelf:(NSString * _Nullable)accid SWIFT_WARN_UNUSED_RESULT;
/// 是否正在使用Demo AppKey
///
/// returns:
/// 返回是否正在使用Demo AppKey
- (BOOL)isUsingDemoAppKey SWIFT_WARN_UNUSED_RESULT;
/// NIM当前服务器配置
@property (nonatomic, strong) NIMServerSetting * _Nonnull serverSetting;
/// 获取NIMSDK配置项实例
@property (nonatomic, readonly, strong) NIMSDKConfig * _Nonnull config;
/// IM配置
- (void)setupIMConfig;
/// 初始化SDK
/// \param appkey 申请的appKey
///
/// \param cerName 推送证书名
///
- (void)registerWithAppkey:(NSString * _Nonnull)appkey cerName:(NSString * _Nullable)cerName;
/// IM 登录
/// \param account 账号
///
/// \param token 令牌（在后台绑定的登录token）
///
/// \param block 回调
///
- (void)loginIM:(NSString * _Nonnull)account :(NSString * _Nonnull)token :(void (^ _Nonnull)(NSError * _Nullable))block;
/// IM 登录
/// \param account 账号
///
/// \param token 令牌（在后台绑定的登录token）
///
/// \param authType authType
///
/// \param loginExt loginExt
///
/// \param block 回调
///
- (void)loginIMWithAccount:(NSString * _Nonnull)account token:(NSString * _Nonnull)token authType:(int32_t)authType loginExt:(NSString * _Nonnull)loginExt :(void (^ _Nonnull)(NSError * _Nullable))block;
/// 自动登录
/// \param account 账号
///
/// \param token 令牌 (在后台绑定的登录token)
///
- (void)autoLoginWithAccount:(NSString * _Nonnull)account token:(NSString * _Nonnull)token;
/// 自动登录
/// \param loginData 自动登录参数
///
- (void)autoLoginWithLoginData:(NIMAutoLoginData * _Nonnull)loginData;
/// IM 登出
- (void)logout:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新APNS Token
/// \param token token APNS Token
///
- (NSString * _Nonnull)updateApnsTokenWithToken:(NSData * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// 更新APNS Token
/// \param data APNS Token
///
/// \param key 自定义本端推送内容, 设置key可对应业务服务器自定义推送文案; 传@”” 清空配置, nil 则不更改
///
///
/// returns:
/// 格式化后的APNS Token
- (NSString * _Nonnull)updateApnsTokenWithData:(NSData * _Nonnull)data key:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// 更新 PushKit Token(目前仅支持 PKPushTypeVoIP)
/// \param token PushKit token
///
- (void)updatePushKitTokenWithToken:(NSData * _Nonnull)token;
/// 上传日志
/// \param completion 上传日志完成回调
///
- (void)uploadLogs:(NIMUploadLogsHandler _Nonnull)completion;
/// 设置用户信息代理
/// \param delegate 代理
///
- (void)addDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
/// 移除用户信息代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
/// 是否登录(废弃)
///
/// returns:
/// true 已登录  false 未登录
- (BOOL)hasLogin SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isLogined() instead");
/// 是否初始化(废弃)
///
/// returns:
/// true 初始化  false 未初始化
- (BOOL)hasInit SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isInit() instead");
/// 获取 demo 层设置
///
/// returns:
/// 设置选项
- (SettingRepo * _Nonnull)getSettingRepo SWIFT_WARN_UNUSED_RESULT;
/// 获取全局配置
///
/// returns:
/// 全局配置选项
- (ConfigCenter * _Nonnull)getConfigCenter SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11NECoreIMKit11IMKitEngine") SWIFT_DEPRECATED_MSG("Use IMKitClient class instead")
@interface IMKitEngine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IMKitEngine * _Nonnull instance;)
+ (IMKitEngine * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) SettingRepo * _Nonnull repo;
@property (nonatomic, copy) NSString * _Nonnull imAccid;
@property (nonatomic, copy) NSString * _Nonnull imToken;
- (void)setupCoreKitIM:(NIMSDKOption * _Nonnull)option;
/// IM配置
- (void)setupIMConfig;
/// 初始化SDK
/// \param appkey 申请的appKey
///
/// \param cerName 推送证书名
///
- (void)registerWithAppkey:(NSString * _Nonnull)appkey cerName:(NSString * _Nonnull)cerName;
- (void)loginIM:(NSString * _Nonnull)account :(NSString * _Nonnull)token :(void (^ _Nonnull)(NSError * _Nullable))block;
/// 自动登录
/// \param account 账号
///
/// \param token 令牌 (在后台绑定的登录token)
///
- (void)autoLoginWithAccount:(NSString * _Nonnull)account token:(NSString * _Nonnull)token;
/// IM 登出
- (void)logout:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 是否是自己
/// \param accid 账户id
///
///
/// returns:
/// 是否是自己
- (BOOL)isMySelf:(NSString * _Nullable)accid SWIFT_WARN_UNUSED_RESULT;
/// 获取AppKey
///
/// returns:
/// 返回当前注册的AppKey
- (NSString * _Nullable)getAppkey SWIFT_WARN_UNUSED_RESULT;
/// 是否正在使用Demo AppKey
///
/// returns:
/// 返回是否正在使用Demo AppKey
- (BOOL)isUsingDemoAppKey SWIFT_WARN_UNUSED_RESULT;
/// 更新APNS Token
/// \param token token APNS Token
///
- (NSString * _Nonnull)updateApnsTokenWithToken:(NSData * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// 更新APNS Token
/// \param data APNS Token
///
/// \param key 自定义本端推送内容, 设置key可对应业务服务器自定义推送文案; 传@”” 清空配置, nil 则不更改
///
///
/// returns:
/// 格式化后的APNS Token
- (NSString * _Nonnull)updateApnsTokenWithData:(NSData * _Nonnull)data key:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// 更新 PushKit Token(目前仅支持 PKPushTypeVoIP)
/// \param token PushKit token
///
- (void)updatePushKitTokenWithToken:(NSData * _Nonnull)token;
/// 设置用户信息代理
/// \param delegate 代理
///
- (void)addDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
/// 移除用户信息代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NIMLoginClient;
@class NIMServerTime;
@protocol NIMLoginManagerDelegate;

SWIFT_CLASS("_TtC11NECoreIMKit17IMKitLoginManager")
@interface IMKitLoginManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IMKitLoginManager * _Nonnull instance;)
+ (IMKitLoginManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// 踢人
/// \param client 当前登录的其他客户端
///
/// \param comletion 完成回调
///
- (void)kickOtherClientWithClient:(NIMLoginClient * _Nonnull)client comletion:(void (^ _Nonnull)(NSError * _Nullable))comletion;
/// 返回当前登录帐号
///
/// returns:
/// 当前登录帐号,如果没有登录成功,这个地方会返回空字符串””
- (NSString * _Nonnull)currentAccount SWIFT_WARN_UNUSED_RESULT;
/// 当前登录状态
///
/// returns:
/// 当前登录状态
- (BOOL)isLogined SWIFT_WARN_UNUSED_RESULT;
/// 当前 SDK 鉴权模式
///
/// returns:
/// 当前 SDK 鉴权模式
- (NIMSDKAuthMode)currentAuthMode SWIFT_WARN_UNUSED_RESULT;
/// 返回当前登录的设备列表
///
/// returns:
/// 当前登录设备列表 内部是NIMLoginClient,不包括自己
- (NSArray<NIMLoginClient *> * _Nullable)currentLoginClients SWIFT_WARN_UNUSED_RESULT;
/// 查询服务器时间
/// \param completion 回调
///
- (void)queryServerTime:(void (^ _Nonnull)(NSError * _Nullable, NIMServerTime * _Nonnull))completion;
/// 添加代理
/// \param delegate 代理
///
- (void)addDelegateWithDelegate:(id <NIMLoginManagerDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegateWithDelegate:(id <NIMLoginManagerDelegate> _Nonnull)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP11NECoreIMKit17IUserInfoDelegate_")
@protocol IUserInfoDelegate <NSObject>
@optional
- (User * _Nullable)getUserInfoWithAccount:(NSString * _Nonnull)account SWIFT_WARN_UNUSED_RESULT;
- (void)fetchUserInfoList:(NSArray<NSString *> * _Nonnull)list completion:(void (^ _Nullable)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
- (void)updateUserInfo:(NSDictionary<NSNumber *, id> * _Nonnull)values completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end



@protocol NIMPassThroughManagerDelegate;

SWIFT_CLASS("_TtC11NECoreIMKit19PassThroughProvider")
@interface PassThroughProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PassThroughProvider * _Nonnull shared;)
+ (PassThroughProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加通知对象
/// \param delegate 通知对象
///
- (void)addDelegateWithDelegate:(id <NIMPassThroughManagerDelegate> _Nonnull)delegate;
/// 移除通知对象
/// \param delegate 通知对象
///
- (void)removeDelegateWithDelegate:(id <NIMPassThroughManagerDelegate> _Nonnull)delegate;
@end


SWIFT_CLASS("_TtC11NECoreIMKit16ResourceProvider")
@interface ResourceProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ResourceProvider * _Nonnull shared;)
+ (ResourceProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)fetchNOSURLWithTargetUrl:(NSString * _Nonnull)targetUrl :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable))completion;
@end


SWIFT_CLASS("_TtC11NECoreIMKit15SettingProvider")
@interface SettingProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SettingProvider * _Nonnull shared;)
+ (SettingProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getHandSetMode SWIFT_WARN_UNUSED_RESULT;
- (void)setHandSetMode:(BOOL)value;
- (BOOL)getMessageRead SWIFT_WARN_UNUSED_RESULT;
- (void)setMessageRead:(BOOL)value;
- (BOOL)getPushEnable SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnable:(BOOL)value;
- (BOOL)getPushDetailEnable SWIFT_WARN_UNUSED_RESULT;
- (void)setPushDetailEnable:(BOOL)value;
- (BOOL)getPcWebPushEnable SWIFT_WARN_UNUSED_RESULT;
- (void)updatePcWebPushEnable:(BOOL)value;
- (BOOL)getPushAudioEnable SWIFT_WARN_UNUSED_RESULT;
- (void)setPushAudioEnable:(BOOL)value;
- (BOOL)getPushShakeEnable SWIFT_WARN_UNUSED_RESULT;
- (void)setPushShakeEnable:(BOOL)value;
/// 配置节点
/// \param value value
///
- (void)setNodeConfig:(BOOL)value;
/// 获取节点配置
///
/// returns:
/// value
- (BOOL)getNodeConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11NECoreIMKit11SettingRepo")
@interface SettingRepo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SettingRepo * _Nonnull shared;)
+ (SettingRepo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) SettingProvider * _Nonnull settingProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)getHandsetMode SWIFT_WARN_UNUSED_RESULT;
- (void)setHandsetMode:(BOOL)value;
- (BOOL)getShowReadStatus SWIFT_WARN_UNUSED_RESULT;
- (void)setShowReadStatus:(BOOL)value;
- (BOOL)getPushShowDetail SWIFT_WARN_UNUSED_RESULT;
- (void)setPushShowDetail:(BOOL)value;
- (BOOL)getMultiPortPushMode SWIFT_WARN_UNUSED_RESULT;
- (void)updateMultiPortPushMode:(BOOL)value;
- (BOOL)getRingMode SWIFT_WARN_UNUSED_RESULT;
- (void)setRingMode:(BOOL)value;
- (BOOL)getVibrateMode SWIFT_WARN_UNUSED_RESULT;
- (void)setVibrateMode:(BOOL)value;
- (BOOL)getPushEnable SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnable:(BOOL)value;
- (BOOL)getNodeValue SWIFT_WARN_UNUSED_RESULT;
- (void)setNodeValue:(BOOL)value;
@end

@class XNotification;
@class NIMSystemNotification;
@class NIMCustomSystemNotification;

SWIFT_CLASS("_TtC11NECoreIMKit21SystemMessageProvider")
@interface SystemMessageProvider : NSObject <NIMSystemNotificationManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SystemMessageProvider * _Nonnull shared;)
+ (SystemMessageProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Gets system notifications stored locally
/// \param limit The maximum number of notifications
///
///
/// returns:
/// List of notification
- (NSArray<XNotification *> * _Nonnull)getNotificationListWithLimit:(NSInteger)limit SWIFT_WARN_UNUSED_RESULT;
- (void)getNotificationListWithLimit:(NSInteger)limit completion:(void (^ _Nonnull)(NSArray<XNotification *> * _Nonnull))completion;
- (void)onReceiveSystemNotification:(NIMSystemNotification * _Nonnull)notification;
- (void)onSystemNotificationCountChanged:(NSInteger)unreadCount;
- (void)deleteNoti;
- (NSInteger)getUnreadCount SWIFT_WARN_UNUSED_RESULT;
- (void)clearUnreadCount;
/// 标记单条系统消息已读
/// \param notification 系统消息
///
- (void)clearSingleUnreadCount:(NIMSystemNotification * _Nonnull)notification;
- (void)sendNotificationMessage:(NIMCustomSystemNotification * _Nonnull)noti :(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)onReceiveCustomSystemNotification:(NIMCustomSystemNotification * _Nonnull)notification;
@end

@class NIMTeam;

SWIFT_CLASS("_TtC11NECoreIMKit4Team")
@interface Team : NSObject
@property (nonatomic, copy) NSString * _Nullable teamId;
@property (nonatomic, copy) NSString * _Nullable teamName;
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
@property (nonatomic, copy) NSString * _Nullable thumbAvatarUrl;
/// 群拥有者ID 普通群拥有者就是群创建者,但是高级群可以进行拥有信息的转让
@property (nonatomic, copy) NSString * _Nullable owner;
/// 群介绍
@property (nonatomic, copy) NSString * _Nullable intro;
/// 群公告
@property (nonatomic, copy) NSString * _Nullable announcement;
@property (nonatomic, strong) NIMTeam * _Nullable nimTeam;
- (nonnull instancetype)initWithTeamInfo:(NIMTeam * _Nullable)teamInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol NIMTeamManagerDelegate;
@class NIMTeamMember;
@class NIMCreateTeamOption;
@class NIMTeamSearchOption;

SWIFT_CLASS("_TtC11NECoreIMKit12TeamProvider")
@interface TeamProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TeamProvider * _Nonnull shared;)
+ (TeamProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
- (NSArray<Team *> * _Nonnull)getTeamList SWIFT_WARN_UNUSED_RESULT;
- (Team * _Nullable)teamInfoWithTeamId:(NSString * _Nullable)teamId SWIFT_WARN_UNUSED_RESULT;
- (Team * _Nullable)superTeamInfoWithTeamId:(NSString * _Nullable)teamId SWIFT_WARN_UNUSED_RESULT;
/// 获取指定群ID的群信息
/// \param teamIds 群id列表
///
/// \param completion 回调
///
- (void)fetchTeamInfoListWithTeamIds:(NSArray<NSString *> * _Nonnull)teamIds :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeam *> * _Nullable))completion;
/// 获取群信息 from server
/// \param teamId 群组ID
///
/// \param completion 回调
///
- (void)fetchTeamInfoWithTeamId:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable, NIMTeam * _Nullable))completion;
/// 获取群信息 from db
/// \param teamId 群组ID
///
/// \param completion 回调
///
- (NIMTeam * _Nullable)getTeamWithTeamId:(NSString * _Nonnull)teamId SWIFT_WARN_UNUSED_RESULT;
- (void)fetchTeamMember:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeamMember *> * _Nullable))completion;
- (NIMTeamMember * _Nullable)teamMember:(NSString * _Nonnull)userId :(NSString * _Nonnull)teamId SWIFT_WARN_UNUSED_RESULT;
- (NIMTeamNotifyState)notifyStateForNewMsgWithTeamId:(NSString * _Nullable)teamId SWIFT_WARN_UNUSED_RESULT;
- (void)createTeam:(NSArray<NSString *> * _Nonnull)accids :(NIMCreateTeamOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable, NSArray<NSString *> * _Nullable))completion;
- (void)updateTeamAvatar:(NSString * _Nonnull)url :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateTeamIntr:(NSString * _Nonnull)intr :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateTeamName:(NSString * _Nonnull)name :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateTeamCustomInfo:(NSString * _Nonnull)info :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)dismissTeam:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)quitTeam:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateTeamNick:(NSString * _Nonnull)uid :(NSString * _Nonnull)newNick :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateMuteState:(BOOL)mute :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateNoti:(NIMTeamNotifyState)state :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateBeInviteMode:(NIMTeamBeInviteMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateInfoMode:(NIMTeamUpdateInfoMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)updateInviteMode:(NIMTeamInviteMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)addTeamUsers:(NSArray<NSString *> * _Nonnull)uids :(NSString * _Nonnull)teamId :(NSString * _Nullable)postscript :(NSString * _Nullable)attach :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeamMember *> * _Nullable))completion;
/// 接受群邀请
/// \param teamId 群组id
///
/// \param invitorId 邀请者ID
///
/// \param completion 邀请后回调
///
- (void)acceptInviteWithTeam:(NSString * _Nonnull)teamId :(NSString * _Nonnull)invitorId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 拒绝群邀请
/// \param teamId 群组id
///
/// \param invitorId 邀请者ID
///
/// \param completion 完成后回调
///
- (void)rejectInviteWithTeam:(NSString * _Nonnull)teamId :(NSString * _Nonnull)invitorId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 查询选项
/// \param option 查询条件
///
/// \param completion 完成回调，本地缓存的群成员信息，如果没有返回nil
///
- (void)searchTeamWithOption:(NIMTeamSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeam *> * _Nullable))completion;
@end

@class UserInfo;

SWIFT_CLASS("_TtC11NECoreIMKit4User")
@interface User : NSObject
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable alias;
@property (nonatomic, copy) NSString * _Nullable ext;
@property (nonatomic, copy) NSString * _Nullable serverExt;
@property (nonatomic, strong) UserInfo * _Nullable userInfo;
@property (nonatomic, strong) NIMUser * _Nullable imUser;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUser:(NIMUser * _Nullable)user OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickName:(NSString * _Nonnull)nickName avatarUrl:(NSString * _Nonnull)avatarUrl OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)showName:(BOOL)showAlias SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)shortNameWithShowAlias:(BOOL)showAlias count:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11NECoreIMKit8UserInfo")
@interface UserInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
@property (nonatomic, copy) NSString * _Nullable thumbAvatarUrl;
@property (nonatomic, copy) NSString * _Nullable sign;
@property (nonatomic) enum Gender gender;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable birth;
@property (nonatomic, copy) NSString * _Nullable mobile;
@property (nonatomic, copy) NSString * _Nullable ext;
- (nonnull instancetype)initWithNickName:(NSString * _Nullable)nickName avatar:(NSString * _Nullable)avatar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11NECoreIMKit16UserInfoProvider")
@interface UserInfoProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UserInfoProvider * _Nonnull shared;)
+ (UserInfoProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <IUserInfoDelegate> _Nullable userDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <IUserInfoDelegate> _Nonnull)delegate;
/// 从本地获取用户资料
/// \param userId 用户id
///
///
/// returns:
/// 返回自定义用户信息
- (User * _Nullable)getUserInfoWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 从云信服务器批量获取用户资料，返回系统类型的用户信息(NIMUser)
/// \param accids 用户id集合
///
/// \param completion 成功回调
///
- (void)fetchUserInfo:(NSArray<NSString *> * _Nonnull)accids :(void (^ _Nonnull)(NSError * _Nullable, NSArray<User *> * _Nullable))completion;
/// 修改自己的用户资料
/// \param values 需要更新的用户信息键值对
///
/// \param completion 完成回调
///
- (void)updateMyUserInfoWithValues:(NSDictionary<NSNumber *, id> * _Nonnull)values :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// return Blacklist
///
/// returns:
/// Blacklist
- (NSArray<User *> * _Nonnull)getBlacklist SWIFT_WARN_UNUSED_RESULT;
@end

@class NIMUserAddAttachment;

SWIFT_CLASS("_TtC11NECoreIMKit13XNotification")
@interface XNotification : NSObject
/// 操作者名字 只有NotificationType为addFriend相关操作有值
@property (nonatomic, copy) NSString * _Nullable sourceName;
/// 目标名字,群名或者是用户名 只有群和高级群相关操作有值
@property (nonatomic, copy) NSString * _Nullable targetName;
/// 操作者
@property (nonatomic, copy) NSString * _Nullable sourceID;
/// 目标ID,群ID或者是用户ID
@property (nonatomic, copy) NSString * _Nullable targetID;
/// 附言
@property (nonatomic, copy) NSString * _Nullable postscript;
/// 未读数
@property (nonatomic) NSInteger unReadCount;
/// 系统通知下发的自定义扩展信息
@property (nonatomic, copy) NSString * _Nullable notifyExt;
/// 附件 额外信息,只有 好友添加 这个通知有附件 好友添加的 attachment 为 NIMUserAddAttachment
@property (nonatomic, strong) NIMUserAddAttachment * _Nullable attachment;
/// 服务器扩展 只有type为添加好友相关类型是有值
@property (nonatomic, copy) NSString * _Nullable serverExt;
/// 缓存IMSDK的通知
@property (nonatomic, strong) NIMSystemNotification * _Nullable imNotification;
@property (nonatomic, strong) User * _Nullable userInfo;
@property (nonatomic, strong) Team * _Nullable teamInfo;
@property (nonatomic, copy) NSArray<XNotification *> * _Nullable msgList;
- (BOOL)isEqualToNoti:(XNotification * _Nonnull)noti SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
