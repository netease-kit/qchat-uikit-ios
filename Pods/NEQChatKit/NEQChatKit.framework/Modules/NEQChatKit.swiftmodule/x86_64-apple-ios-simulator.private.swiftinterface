// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NEQChatKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreMedia
import Foundation
import NECommonKit
import NECoreIMKit
import NECoreKit
import NECoreQChatKit
@_exported import NEQChatKit
import NIMSDK
import Swift
import _Concurrency
import _StringProcessing
public let qChatKitVersion: Swift.String
public let revokeMessageFlag: Swift.String
public let revokeMessageContent: Swift.String
public let deleteMessageFlag: Swift.String
public let emojiCommentLimit: Swift.Int
public let emojiAuthType: Swift.Int
public let errorCode_TimeOut: Swift.Int
public let errorCode_NetWorkError: Swift.Int
public let errorCode_NoPermission: Swift.Int
public let errorCode_NoExist: Swift.Int
public let errorCode_Existed: Swift.Int
@objc public protocol QChatRepoMessageDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onReceive(_ messages: [NIMQChatMessage])
  @objc optional func onUnReadChange(_ unreads: [NIMQChatUnreadInfo]?, _ lastUnreads: [NIMQChatUnreadInfo]?)
  @objc optional func serverUnreadInfoChanged(_ serverUnreadInfoDic: [Foundation.NSNumber : NIMQChatServerUnreadInfo])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatRepo : ObjectiveC.NSObject, NECoreQChatKit.QChatMessageProviderDelegate {
  @objc public static let shared: NEQChatKit.QChatRepo
  @objc final public let roleProvider: NECoreQChatKit.QChatRoleProvider
  @objc final public let serverProvider: NECoreQChatKit.QChatServerProvider
  @objc final public let channelProvider: NECoreQChatKit.QChatChannelProvider
  @objc final public let contactProvider: NECoreIMKit.FriendProvider
  @objc final public let userProvider: NECoreIMKit.UserInfoProvider
  @objc final public let messageProvider: NECoreQChatKit.QChatMessageProvider
  @objc final public let settingProvider: NECoreIMKit.SettingProvider
  @objc final public let apnsProvider: NECoreQChatKit.QChatApnsProvider
  @objc weak public var delegate: NEQChatKit.QChatRepoMessageDelegate? {
    @objc get
    @objc set
  }
  @objc public func onReceive(_ messages: [NIMQChatMessage])
  @objc public func onUnReadChange(_ unreads: [NIMQChatUnreadInfo]?, _ lastUnreads: [NIMQChatUnreadInfo]?)
  @objc public func serverUnreadInfoChanged(_ serverUnreadInfoDic: [Foundation.NSNumber : NIMQChatServerUnreadInfo])
  public func createRole(_ param: NECoreQChatKit.ServerRoleParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerRole) -> Swift.Void)
  public func getRoles(_ param: NECoreQChatKit.GetServerRoleParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerRole]?, Swift.Set<Foundation.NSNumber>?) -> Swift.Void)
  public func updateServerRolePriorities(_ param: NECoreQChatKit.UpdateServerRolePrioritiesParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func getChannelRoles(_ param: NECoreQChatKit.ChannelRoleParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ChannelRole]?) -> Swift.Void)
  public func getServerRoleMembers(_ param: NECoreQChatKit.GetServerRoleMembersParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.RoleMember]) -> Swift.Void)
  public func updateRole(_ param: NECoreQChatKit.UpdateServerRoleParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerRole) -> Swift.Void)
  public func deleteRoles(_ param: NECoreQChatKit.DeleteServerRoleParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func getServerMembers(_ param: NECoreQChatKit.GetServerMembersByPageParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerMemeber]) -> Swift.Void)
  public func updateMyServerMember(_ param: NECoreQChatKit.UpdateMyMemberInfoParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerMemeber) -> Swift.Void)
  public func updateServerMember(_ param: NECoreQChatKit.UpdateServerMemberInfoParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerMemeber) -> Swift.Void)
  public func addRoleMember(_ param: NECoreQChatKit.AddServerRoleMemberParam, _ completion: @escaping (Swift.Error?, [Swift.String], [Swift.String]) -> Swift.Void)
  public func updateChannelRole(param: NECoreQChatKit.UpdateChannelRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelRole?) -> Swift.Void)
  public func removeChannelRole(param: NECoreQChatKit.RemoveChannelRoleParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getServerRolesByAccId(param: NECoreQChatKit.GetServerRolesByAccIdParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerRole]?) -> Swift.Void)
  public func deleateRoleMember(_ param: NECoreQChatKit.RemoveServerRoleMemberParam, _ completion: @escaping (Swift.Error?, [Swift.String], [Swift.String]) -> Swift.Void)
  public func addMemberRole(param: NECoreQChatKit.AddMemberRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.MemberRole?) -> Swift.Void)
  public func getMemberRoles(param: NECoreQChatKit.GetMemberRolesParam, _ completion: @escaping (Foundation.NSError?, [NECoreQChatKit.MemberRole]?) -> Swift.Void)
  public func updateMemberRole(param: NECoreQChatKit.UpdateMemberRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.MemberRole?) -> Swift.Void)
  public func removeMemberRole(param: NECoreQChatKit.RemoveMemberRoleParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func removeServerRoleMember(param: NIMQChatRemoveServerRoleMemberParam, _ completion: @escaping (Swift.Error?, NIMQChatRemoveServerRoleMembersResult?) -> Swift.Void)
  @objc public func revokeMessage(param: NIMQChatRevokeMessageParam, completion: NIMQChatUpdateMessageHandler?)
  @objc public func deleteMessage(param: NIMQChatDeleteMessageParam, completion: NIMQChatUpdateMessageHandler?)
  @objc public func addQuickComment(type: Swift.Int64, to message: NIMQChatMessage, completion: NIMQChatHandler?)
  @objc public func deleteQuickComment(type: Swift.Int64, to message: NIMQChatMessage, completion: NIMQChatHandler?)
  @objc public func fetchQuickComments(messages: [NIMQChatMessage], completion: @escaping NIMQChatFetchQuickCommentsByMsgsHandler)
  public func updateChannelInfo(_ param: NECoreQChatKit.UpdateChannelParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChatChannel?) -> Swift.Void)
  public func getChannelMembers(param: NECoreQChatKit.ChannelMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelMembersResult?) -> Swift.Void)
  public func getExistingChannelBlackWhiteMembers(param: NECoreQChatKit.GetExistingChannelBlackWhiteMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.BlackWhiteMembersResult?) -> Swift.Void)
  @objc public func fetchUserInfo(accountList: [Swift.String], _ completion: @escaping (Foundation.NSError?, [NECoreIMKit.User]?) -> Swift.Void)
  public func kickoutServerMembers(_ param: NECoreQChatKit.KickServerMembersParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func getServers(_ parameter: NECoreQChatKit.QChatGetServersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServersResult?) -> Swift.Void)
  public func updateServer(_ param: NECoreQChatKit.UpdateServerParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.QChatServer) -> Swift.Void)
  public func getServerMembersByPage(_ parameter: NECoreQChatKit.QChatGetServerMembersByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServerMembersResult?) -> Swift.Void)
  public func inviteMembersToServer(_ parameter: NECoreQChatKit.QChatInviteServerMembersParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func inviteMembersToServerWithResult(param: NECoreQChatKit.QChatInviteServerMembersParam, _ completion: @escaping (Foundation.NSError?, [Swift.String]?, [Swift.String]?) -> Swift.Void)
  public func getExistingServerRolesByAccids(_ parameter: NECoreQChatKit.QChatGetExistingAccidsInServerRoleParam, _ completion: @escaping (Foundation.NSError?, [Swift.String : [NECoreQChatKit.ServerRole]]?) -> Swift.Void)
  public func checkPermission(serverId: Swift.UInt64, channelId: Swift.UInt64?, permissionType: NIMQChatPermissionType, complete: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getExistingServerRoleMembersByAccids(_ param: NECoreQChatKit.GetExistingServerRoleMembersByAccidsParam, _ completion: @escaping (Swift.Error?, [Swift.String]) -> Swift.Void)
  public func getChannelUnReadInfo(_ param: NECoreQChatKit.GetChannelUnreadInfosParam, _ completion: @escaping (Swift.Error?, [NIMQChatUnreadInfo]?) -> Swift.Void)
  public func getChannelsByPage(param: NECoreQChatKit.QChatGetChannelsByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetChannelsByPageResult?) -> Swift.Void)
  public func leaveServer(_ serverId: Swift.UInt64?, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func getLastMessage(_ serverId: Swift.UInt64, _ channelIds: [Foundation.NSNumber], _ completion: @escaping (Swift.Error?, [Foundation.NSNumber : NIMQChatMessage]?) -> Swift.Void)
  @objc public func enterAsVisitor(_ param: NIMQChatEnterServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatEnterServerAsVisitorResult?) -> Swift.Void)
  @objc public func leaveAsVisitor(_ param: NIMQChatLeaveServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatLeaveServerAsVisitorResult?) -> Swift.Void)
  @objc public func subscribeChannel(_ param: NIMQChatSubscribeChannelAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatSubscribeChannelAsVisitorResult?) -> Swift.Void)
  @objc public func subscribeAsVisitor(_ param: NIMQChatSubscribeServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatSubscribeServerAsVisitorResult?) -> Swift.Void)
  public func fetchChannelsByServerIdWithLastMessage(_ serverId: Swift.UInt64, _ timeTag: Foundation.TimeInterval, _ limit: Swift.Int, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetChannelsByPageResult?, [Foundation.NSNumber : NIMQChatMessage]?) -> Swift.Void)
  public func applyServerJoin(param: NECoreQChatKit.QChatApplyServerJoinParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getServerMembers(param: NECoreQChatKit.QChatGetServerMembersParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerMemeber]?) -> Swift.Void)
  public func getServerList(param: NECoreQChatKit.GetServersByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.GetServersByPageResult?) -> Swift.Void)
  public func createServer(param: NECoreQChatKit.CreateServerParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.CreateServerResult?) -> Swift.Void)
  @objc public func deleteServer(_ serverid: Swift.UInt64, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func applyServerJoin(parameter: NECoreQChatKit.QChatApplyServerJoinParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getServerMemberList(parameter: NECoreQChatKit.QChatGetServerMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServerMembersResult?) -> Swift.Void)
  public func createAnncServer(_ param: inout NECoreQChatKit.CreateServerParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatServer?) -> Swift.Void)
  @objc public func getUserPushNotificationConfigByServer(server: [Foundation.NSNumber], _ completion: @escaping (Swift.Error?, [NIMQChatUserPushNotificationConfig]?) -> Swift.Void)
  @objc public func updatePushNotificationByProfile(profile: NIMPushNotificationProfile, server: Swift.UInt64, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
