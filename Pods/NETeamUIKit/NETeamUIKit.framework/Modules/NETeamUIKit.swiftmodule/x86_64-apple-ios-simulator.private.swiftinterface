// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NETeamUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import NEChatKit
@_exported import NECommonKit
@_exported import NECommonUIKit
@_exported import NECoreIMKit
@_exported import NECoreKit
@_exported import NETeamUIKit
import NIMSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunHistoryMessageCell : NETeamUIKit.NEBaseHistoryMessageCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamArrowSettingCell : NETeamUIKit.NEBaseTeamArrowSettingCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamAvatarViewController : NETeamUIKit.NEBaseTeamAvatarViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func uploadPhoto()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamDefaultIconCell : NETeamUIKit.NEBaseTeamDefaultIconCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamHistoryMessageController : NETeamUIKit.NEBaseTeamHistoryMessageController {
  @objc @_Concurrency.MainActor(unsafe) public var searchView: NECommonUIKit.FunSearchView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamInfoViewController : NETeamUIKit.NEBaseTeamInfoViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamIntroduceViewController : NETeamUIKit.NEBaseTeamIntroduceViewController {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) open class FunTeamMemberCell : NETeamUIKit.NEBaseTeamMemberCell {
  @objc @_Concurrency.MainActor(unsafe) public var dividerLine: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FunTeamMembersController : NETeamUIKit.NEBaseTeamMembersController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override public init(teamId: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamNameViewController : NETeamUIKit.NEBaseTeamNameViewController {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func disableSubmit()
  @_Concurrency.MainActor(unsafe) @objc override open func enableSubmit()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NETeamUIKit.TeamRouter {
  @objc public static func registerFun()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamSettingHeaderCell : NETeamUIKit.NEBaseTeamSettingHeaderCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamSettingSelectCell : NETeamUIKit.NEBaseTeamSettingSelectCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamSettingSwitchCell : NETeamUIKit.NEBaseTeamSettingSwitchCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamSettingViewController : NETeamUIKit.NEBaseTeamSettingViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func reloadSectionData()
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func getHeaderView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func getFooterView() -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override open func setupUserInfoCollection(_ cornerView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override open func checkoutAddShowOrHide()
  @_Concurrency.MainActor(unsafe) @objc override open func toInfoView()
  @_Concurrency.MainActor(unsafe) @objc override open func didClickChangeNick()
  @_Concurrency.MainActor(unsafe) @objc override open func didChangeInviteModeClick(_ model: NETeamUIKit.SettingCellModel)
  @_Concurrency.MainActor(unsafe) @objc override open func didUpdateTeamInfoClick(_ model: NETeamUIKit.SettingCellModel)
  @_Concurrency.MainActor(unsafe) @objc override open func didClickHistoryMessage()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override open func toMemberList()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunTeamUserCell : NETeamUIKit.NEBaseTeamUserCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class HistoryMessageCell : NETeamUIKit.NEBaseHistoryMessageCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseHistoryMessageCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var searchText: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var rangeTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public var headImge: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var title: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitle: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomLine: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamArrowSettingCell : NETeamUIKit.NEBaseTeamSettingCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamAvatarViewController : NECommonUIKit.NEBaseViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UINavigationControllerDelegate {
  public typealias SaveCompletion = () -> Swift.Void
  @objc @_Concurrency.MainActor(unsafe) public var block: NETeamUIKit.NEBaseTeamAvatarViewController.SaveCompletion?
  @objc @_Concurrency.MainActor(unsafe) public var team: NIMTeam?
  @objc @_Concurrency.MainActor(unsafe) final public let repo: NEChatKit.TeamRepo
  @objc @_Concurrency.MainActor(unsafe) final public let headerBack: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let photoImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let defaultHeaderBack: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let tag: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var iconUrls: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) public var headerView: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var headerUrl: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var iconCollection: UIKit.UICollectionView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func uploadPhoto()
  @objc @_Concurrency.MainActor(unsafe) open func savePhoto()
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc @_Concurrency.MainActor(unsafe) open func uploadHeadImage(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamDefaultIconCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamHistoryMessageController : NECommonUIKit.NEBaseViewController, UIKit.UITextFieldDelegate, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) final public let viewmodel: NETeamUIKit.TeamSettingViewModel
  @objc @_Concurrency.MainActor(unsafe) public var teamSession: NIMSession?
  @objc @_Concurrency.MainActor(unsafe) public var searchStr: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func initialConfig()
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var searchTextField: NECommonUIKit.SearchTextField {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: NECommonUIKit.NEEmptyDataView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamInfoViewController : NECommonUIKit.NEBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) final public let viewmodel: NETeamUIKit.TeamInfoViewModel
  @objc @_Concurrency.MainActor(unsafe) public var team: NIMTeam?
  @_Concurrency.MainActor(unsafe) public var cellClassDic: [Swift.Int : NETeamUIKit.NEBaseTeamSettingCell.Type]
  @objc @_Concurrency.MainActor(unsafe) public var contentTable: UIKit.UITableView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamIntroduceViewController : NECommonUIKit.NEBaseViewController, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var team: NIMTeam?
  @objc @_Concurrency.MainActor(unsafe) final public let textLimit: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) final public let repo: NEChatKit.TeamRepo
  @objc @_Concurrency.MainActor(unsafe) final public let backView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var clearButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var countLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamMemberCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamMembersController : NECommonUIKit.NEBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var teamId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var datas: [NEChatKit.TeamMemberInfoModel]?
  @objc @_Concurrency.MainActor(unsafe) public var ownerId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var isSenior: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var searchDatas: [NEChatKit.TeamMemberInfoModel]
  @objc @_Concurrency.MainActor(unsafe) final public let back: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var searchTextField: UIKit.UITextField {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentTable: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(teamId: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamNameViewController : NECommonUIKit.NEBaseViewController, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var team: NIMTeam?
  @objc @_Concurrency.MainActor(unsafe) public var type: NETeamUIKit.ChangeType
  @objc @_Concurrency.MainActor(unsafe) public var teamMember: NIMTeamMember?
  @objc @_Concurrency.MainActor(unsafe) public var repo: NEChatKit.TeamRepo
  @objc @_Concurrency.MainActor(unsafe) final public let textLimit: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) final public let backView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var countLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var clearButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func disableSubmit()
  @objc @_Concurrency.MainActor(unsafe) open func enableSubmit()
  @objc @_Concurrency.MainActor(unsafe) open func saveName()
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TeamRouter : ObjectiveC.NSObject {
  @objc public static let repo: NEChatKit.TeamRepo
  @objc public static var iconUrls: [Swift.String]
  @objc public static var iconUrlsFun: [Swift.String]
  @objc public static func registerCommon(icUrls: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ChangeType : Swift.Int {
  case TeamName = 0
  case NickName
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TeamSettingType : Swift.Int {
  case Discuss = 0
  case Senior = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamSettingCell : NECommonUIKit.CornerCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var arrow: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func configure(_ anyModel: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamSettingHeaderCell : NETeamUIKit.NEBaseTeamSettingCell {
  @objc @_Concurrency.MainActor(unsafe) public var headerView: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamSettingSelectCell : NETeamUIKit.NEBaseTeamSettingCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamSettingSwitchCell : NETeamUIKit.NEBaseTeamSettingCell {
  @objc @_Concurrency.MainActor(unsafe) public var tSwitch: UIKit.UISwitch
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) public func switchChange(_ s: UIKit.UISwitch)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamSettingViewController : NECommonUIKit.NEBaseViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let viewmodel: NETeamUIKit.TeamSettingViewModel
  @objc @_Concurrency.MainActor(unsafe) public var teamId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var addBtnWidth: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var addBtnLeftMargin: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var teamSettingType: NETeamUIKit.TeamSettingType
  @objc @_Concurrency.MainActor(unsafe) public var isSeniorDiscuss: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var cellClassDic: [Swift.Int : NETeamUIKit.NEBaseTeamSettingCell.Type]
  @objc @_Concurrency.MainActor(unsafe) public var contentTable: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var teamHeader: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var teamNameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberCountLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userinfoCollection: UIKit.UICollectionView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var addBtn: NECommonUIKit.ExpandButton {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func reloadSectionData()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func getHeaderView() -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) open func getFooterView() -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) open func getBottomText() -> Swift.String?
  @objc @_Concurrency.MainActor(unsafe) open func setupUserInfoCollection(_ cornerView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func addUser()
  @objc @_Concurrency.MainActor(unsafe) open func removeTeamForMyself()
  @objc @_Concurrency.MainActor(unsafe) open func leaveDiscuss()
  @objc @_Concurrency.MainActor(unsafe) open func toInfoView()
  @objc @_Concurrency.MainActor(unsafe) open func toMemberList()
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func checkoutAddShowOrHide()
  @objc @_Concurrency.MainActor(unsafe) open func didChangeInviteModeClick(_ model: NETeamUIKit.SettingCellModel)
  @objc @_Concurrency.MainActor(unsafe) open func didUpdateTeamInfoClick(_ model: NETeamUIKit.SettingCellModel)
  @objc @_Concurrency.MainActor(unsafe) open func didClickChangeNick()
  @objc @_Concurrency.MainActor(unsafe) open func didClickHistoryMessage()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseTeamUserCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NETeamUIKit.TeamRouter {
  @objc public static func register()
}
@objc public enum SettingCellType : Swift.Int {
  case SettingArrowCell = 0
  case SettingSwitchCell
  case SettingSelectCell
  case SettingHeaderCell
  case SettingTeamUserCell
  case SettingSubtitleCell
  case SettingSubtitleCustomCell
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SettingCellModel : ObjectiveC.NSObject {
  public typealias SwitchChangeCompletion = (Swift.Bool) -> Swift.Void
  public typealias CellClick = () -> Swift.Void
  @objc public var cellName: Swift.String?
  @objc public var subTitle: Swift.String?
  @objc public var type: Swift.Int
  @objc public var swichChange: NETeamUIKit.SettingCellModel.SwitchChangeCompletion?
  @objc public var rowHeight: CoreFoundation.CGFloat
  @objc public var titleWidth: CoreFoundation.CGFloat
  public var cornerType: NECommonUIKit.CornerType
  @objc public var headerUrl: Swift.String?
  @objc public var cellClick: NETeamUIKit.SettingCellModel.CellClick?
  @objc public var switchOpen: Swift.Bool
  @objc public var defaultHeadData: Swift.String?
  @objc public var rightCustomViewIcon: Swift.String?
  @objc public var customViewClick: NETeamUIKit.SettingCellModel.CellClick?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SettingSectionModel : ObjectiveC.NSObject {
  @objc public var cellModels: [NETeamUIKit.SettingCellModel]
  @objc override dynamic public init()
  @objc open func setCornerType()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamArrowSettingCell : NETeamUIKit.NEBaseTeamArrowSettingCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamAvatarViewController : NETeamUIKit.NEBaseTeamAvatarViewController {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let ModuleName: Swift.String
public var inviteNumberLimit: Swift.Int
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamDefaultIconCell : NETeamUIKit.NEBaseTeamDefaultIconCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamHistoryMessageController : NETeamUIKit.NEBaseTeamHistoryMessageController {
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamInfoViewController : NETeamUIKit.NEBaseTeamInfoViewController {
  @_Concurrency.MainActor(unsafe) @objc public init(team: NIMTeam?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TeamInfoViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamIntroduceViewController : NETeamUIKit.NEBaseTeamIntroduceViewController {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamMemberCell : NETeamUIKit.NEBaseTeamMemberCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamMembersController : NETeamUIKit.NEBaseTeamMembersController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override public init(teamId: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamNameViewController : NETeamUIKit.NEBaseTeamNameViewController {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingHeaderCell : NETeamUIKit.NEBaseTeamSettingHeaderCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingRightCustomCell : NETeamUIKit.TeamSettingSubtitleCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) public var customRightView: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func customRightViewClick()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingSelectCell : NETeamUIKit.NEBaseTeamSettingSelectCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingSubtitleCell : NETeamUIKit.NEBaseTeamSettingCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleWidthAnchor: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ anyModel: Any)
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingSwitchCell : NETeamUIKit.NEBaseTeamSettingSwitchCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamSettingViewController : NETeamUIKit.NEBaseTeamSettingViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func getHeaderView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func checkoutAddShowOrHide()
  @_Concurrency.MainActor(unsafe) @objc override open func getFooterView() -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override open func setupUserInfoCollection(_ cornerView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override open func toInfoView()
  @_Concurrency.MainActor(unsafe) @objc override open func didClickChangeNick()
  @_Concurrency.MainActor(unsafe) @objc override open func didClickHistoryMessage()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override open func toMemberList()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TeamSettingViewModel : ObjectiveC.NSObject, NIMTeamManagerDelegate {
  @objc public var sectionData: [NETeamUIKit.SettingSectionModel]
  @objc public var searchResultInfos: [NEChatKit.HistoryMessageModel]?
  @objc public var teamInfoModel: NEChatKit.TeamInfoModel?
  @objc final public let repo: NEChatKit.TeamRepo
  @objc public var memberInTeam: NIMTeamMember?
  @objc override dynamic public init()
  @objc deinit
  @objc public func dismissTeam(_ teamId: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func quitTeam(_ teamId: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func getTopSessionInfo(_ session: NIMSession) -> NIMStickTopSessionInfo
  @objc public func removeStickTop(params: NIMStickTopSessionInfo, _ completion: @escaping (Foundation.NSError?, NIMStickTopSessionInfo?) -> Swift.Void)
  @objc public func updateInfoMode(_ mode: NIMTeamUpdateInfoMode, _ teamId: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func updateInviteMode(_ mode: NIMTeamInviteMode, _ teamId: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func isNormalTeam() -> Swift.Bool
  @objc public func searchMessages(_ session: NIMSession, option: NIMMessageSearchOption, _ completion: @escaping (Foundation.NSError?, [NEChatKit.HistoryMessageModel]?) -> Swift.Void)
  @objc public func onTeamMemberRemoved(_ team: NIMTeam, withMembers memberIDs: [Swift.String]?)
  @objc public func onTeamMemberChanged(_ team: NIMTeam)
  @objc public func onTeamUpdated(_ team: NIMTeam)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TeamUserCell : NETeamUIKit.NEBaseTeamUserCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NETeamUIKit.ChangeType : Swift.Equatable {}
extension NETeamUIKit.ChangeType : Swift.Hashable {}
extension NETeamUIKit.ChangeType : Swift.RawRepresentable {}
extension NETeamUIKit.TeamSettingType : Swift.Equatable {}
extension NETeamUIKit.TeamSettingType : Swift.Hashable {}
extension NETeamUIKit.TeamSettingType : Swift.RawRepresentable {}
extension NETeamUIKit.SettingCellType : Swift.Equatable {}
extension NETeamUIKit.SettingCellType : Swift.Hashable {}
extension NETeamUIKit.SettingCellType : Swift.RawRepresentable {}
