
#if defined(__arm64__) && __arm64__ || (__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef NECHATKIT_SWIFT_H
#define NECHATKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import NECoreIMKit;
@import NIMSDK;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NEChatKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSMutableAttributedString;

SWIFT_CLASS("_TtC9NEChatKit17ChatLocaitonModel")
@interface ChatLocaitonModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull address;
@property (nonatomic, copy) NSString * _Nonnull city;
@property (nonatomic) CGFloat lat;
@property (nonatomic) CGFloat lng;
@property (nonatomic) NSInteger distance;
@property (nonatomic, strong) NSMutableAttributedString * _Nullable attribute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ChatExtendProvider;
@class FriendProvider;
@class UserInfoProvider;
@class TeamProvider;
@class SettingProvider;
@protocol NIMChatManagerDelegate;
@protocol FriendProviderDelegate;
@protocol NIMTeamManagerDelegate;
@protocol NIMConversationManagerDelegate;
@protocol NIMSystemNotificationManagerDelegate;
@protocol ChatExtendProviderDelegate;
@class NIMMessage;
@class NIMSession;
@class NIMMessageReceipt;
@class NSError;
@class User;
@class NIMTeamMember;
@class NIMTeam;
@class NIMIncompleteSessionInfo;
@class NIMImportedRecentSession;
@class NIMHistoryMessageSearchOption;
@class NIMMessageSearchOption;
@class ChatTeamInfoModel;
@class NIMAddCollectParams;
@class NIMCollectInfo;
@class NIMMessagePinItem;
@class NIMCustomSystemNotification;
@class NIMGetMessagesDynamicallyParam;
@class NIMChatExtendBasicInfo;

SWIFT_CLASS("_TtC9NEChatKit8ChatRepo")
@interface ChatRepo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChatRepo * _Nonnull shared;)
+ (ChatRepo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 聊天扩展Provider
@property (nonatomic, readonly, strong) ChatExtendProvider * _Nonnull chatExtendProvider;
/// 好友Provider
@property (nonatomic, readonly, strong) FriendProvider * _Nonnull contactProvider;
/// 用户信息Provider
@property (nonatomic, readonly, strong) UserInfoProvider * _Nonnull userProvider;
/// 群组Provider
@property (nonatomic, readonly, strong) TeamProvider * _Nonnull teamProvider;
/// 设置Provider
@property (nonatomic, readonly, strong) SettingProvider * _Nonnull settingProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加聊天代理
/// \param delegate 代理
///
- (void)addChatDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
/// 移除聊天代理
/// \param delegate 代理
///
- (void)removeChatDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
/// 添加通讯录代理
/// \param delegate 代理
///
- (void)addContactDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
/// 移除通讯录代理
/// \param delegate 代理
///
- (void)removeContactDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
/// 添加群组代理
/// \param delegate 代理
///
- (void)addTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 移除群组代理
/// \param delegate 代理
///
- (void)removeTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 添加会话代理
/// \param delegate 代理
///
- (void)addSessionDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
/// 移除会话代理
/// \param delegate 代理
///
- (void)removeSessionDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
/// 添加系统通知代理
/// \param delegate 代理
///
- (void)addSystemNotificationDelegateWithDelegate:(id <NIMSystemNotificationManagerDelegate> _Nonnull)delegate;
/// 移除系统通知代理
/// \param delegate 代理
///
- (void)removeSystemNotificationDelegateWithDelegate:(id <NIMSystemNotificationManagerDelegate> _Nonnull)delegate;
/// 添加聊天扩展代理
/// \param delegate 代理
///
- (void)addChatExtendDelegateWithDelegate:(id <ChatExtendProviderDelegate> _Nonnull)delegate;
/// 移除聊天扩展代理
/// \param delegate 代理
///
- (void)removeChatExtendDelegateWithDelegate:(id <ChatExtendProviderDelegate> _Nonnull)delegate;
/// 发送消息
/// \param message 消息对象
///
/// \param session 接收方
///
/// \param completion 发送完成后的回调，这里的回调完成只表示当前这个函数调用完成，需要后续的回调才能判断消息是否已经发送至服务器
///
- (void)sendMessageWithMessage:(NIMMessage * _Nonnull)message session:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 从本地数据库读取一个会话里某条消息之前的若干条的消息
/// \param session 消息所属的会话
///
/// \param message 当前最早的消息,没有则传入nil
///
/// \param limit 个数限制
///
/// \param completion 完成后的回调
///
- (void)getHistoryMessageWithSession:(NIMSession * _Nonnull)session message:(NIMMessage * _Nullable)message limit:(NSUInteger)limit :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
/// 发送已读回执(p2p)
/// \param param 已读回执
///
/// \param completion 完成回调
///
- (void)markP2pMessageReadWithParam:(NIMMessageReceipt * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 发送已读回执 (Team)
/// \param param 已读回执
///
/// \param completion 完成回调
///
- (void)markTeamMessageReadWithParam:(NSArray<NIMMessageReceipt *> * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessageReceipt *> * _Nullable))completion;
/// 重新发送消息
/// \param message 消息
///
///
/// returns:
/// 错误信息
- (NSError * _Nullable)resendMessageWithMessage:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 删除消息
/// \param message 待删除的聊天消息
///
- (void)deleteMessageWithMessage:(NIMMessage * _Nonnull)message;
/// 删除云端消息
/// \param message 待删除消息
///
- (void)deleteServerMessageWithMessage:(NIMMessage * _Nonnull)message ext:(NSString * _Nullable)ext :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 回复消息
/// \param message 新生成的消息
///
/// \param target 被回复的消息
///
/// \param completion 发送完成后的回调，这里的回调完成只表示当前这个函数调用完成，需要后续的回调才能判断消息是否已经发送至服务器
///
- (void)replyMessage:(NIMMessage * _Nonnull)message :(NIMMessage * _Nonnull)target :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 回复消息（不使用 thread ）
/// \param message 新生成的消息
///
/// \param session 接收方
///
/// \param targetUuid 被回复的消息的 uuid
///
/// \param completion 发送完成后的回调，这里的回调完成只表示当前这个函数调用完成，需要后续的回调才能判断消息是否已经发送至服务器
///
- (void)replyMessageWithoutThreadWithMessage:(NIMMessage * _Nonnull)message session:(NIMSession * _Nonnull)session target:(NIMMessage * _Nonnull)target :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 撤回消息，不包含推送信息
/// \param message 需要被撤回的消息
///
/// \param completion 完成回调
///
- (void)revokeMessageWithMessage:(NIMMessage * _Nonnull)message :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 设置一个会话里所有消息置为已读
/// \param session 需设置的会话
///
/// \param completion 完成回调
///
- (void)markMessageRead:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 从本地获取用户资料
/// \param userId 用户id
///
///
/// returns:
/// User(NIMUser)
- (User * _Nullable)getUserInfoWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取单个群成员信息
/// \param userId 用户id
///
/// \param teamId 群组id
///
///
/// returns:
/// 成员信息
- (NIMTeamMember * _Nullable)getTeamMemberListWithUserId:(NSString * _Nonnull)userId teamId:(NSString * _Nonnull)teamId SWIFT_WARN_UNUSED_RESULT;
/// 获取群信息
/// \param teamId 群id
///
/// \param completion 完成回调
///
- (void)getTeamInfoWithTeamId:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable, NIMTeam * _Nullable))completion;
/// 根据群组 ID 获取具体的群组信息（本地数据库）
/// \param teamId 群组id
///
///
/// returns:
/// 群组信息
- (NIMTeam * _Nullable)getTeamInfoWithTeamId:(NSString * _Nonnull)teamId SWIFT_WARN_UNUSED_RESULT;
/// 是否是置顶会话
/// \param uid 会话id (P2P为userId，team时为teamId)
///
///
/// returns:
/// 结果
- (BOOL)isTopStick:(NSString * _Nonnull)uid SWIFT_WARN_UNUSED_RESULT;
/// 将用户从黑名单移除
/// \param account 用户id
///
/// \param completion 完成回调
///
- (void)removeBlackListWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 添加用户到黑名单
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     account: 用户id
///   </li>
///   <li>
///     completion: 完成回调
///   </li>
/// </ul>
- (void)addBlackWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 是否需要消息通知
/// \param userId 用户id
///
///
/// returns:
/// 是否需要消息通知
- (BOOL)isNeedNotifyWithUserId:(NSString * _Nullable)userId SWIFT_WARN_UNUSED_RESULT;
/// 设置消息提醒
/// \param userId 用户id
///
/// \param notify 是否提醒
///
/// \param completion 完成回调
///
- (void)setNotify:(NSString * _Nonnull)userId :(BOOL)notify :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 查询漫游消息未完整会话信息
/// \param session 目标会话
///
/// \param completion 完成回调
///
- (void)getIncompleteSessionInfoWithSession:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMIncompleteSessionInfo *> * _Nullable))completion;
/// 更新未漫游完整会话列表
/// \param messages 消息对象
///
/// \param completion 完成回调
///
- (void)updateIncompleteSessionsWithMessages:(NSArray<NIMMessage *> * _Nonnull)messages :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMImportedRecentSession *> * _Nullable))completion;
/// 从服务器上获取一个会话里某条消息之前的若干条的消息(此接口不支持查询聊天室消息)
/// \param session 消息所属的会话
///
/// \param option 搜索选项
///
/// \param completion 完成回调
///
- (void)getHistoryMessageWithSession:(NIMSession * _Nonnull)session option:(NIMHistoryMessageSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
/// 搜索本地会话内消息
/// \param session 消息所属的会话
///
/// \param option 搜索选项
///
/// \param completion 完成回调
///
- (void)searchMessages:(NIMSession * _Nonnull)session option:(NIMMessageSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessage *> * _Nullable))completion;
/// 创建普通群
/// \param accids 用户accid列表
///
/// \param iconUrl 群头像
///
/// \param teamName 群名称
///
/// \param completion 完成回调
///
- (void)createNormalTeam:(NSString * _Nonnull)teamName :(NSString * _Nonnull)iconUrl :(NSArray<NSString *> * _Nonnull)accids :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable, NSArray<NSString *> * _Nullable))completion;
/// 创建高级群
/// \param accids 用户accid列表
///
/// \param iconUrl 群头像
///
/// \param teamName 群名称
///
/// \param completion 完成回调
///
- (void)createAdvanceTeam:(NSString * _Nonnull)teamName :(NSString * _Nonnull)iconUrl :(NSArray<NSString *> * _Nonnull)accids :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable, NSArray<NSString *> * _Nullable))completion;
/// 查询某个会话的置顶信息
/// \param session 需要查询的会话
///
///
/// returns:
/// 是否是置顶会话
- (BOOL)isStickTop:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 获取群信息及群成员
/// \param teamid 群组id
///
/// \param completion 完成回调
///
- (void)getTeamInfo:(NSString * _Nonnull)teamid :(void (^ _Nonnull)(NSError * _Nullable, ChatTeamInfoModel * _Nullable))completion;
/// 添加一个收藏
/// \param info 添加收藏的参数，必须字段：type、data、ext
///
/// \param completion 完成回调
///
- (void)collectMessage:(NIMAddCollectParams * _Nonnull)info :(void (^ _Nonnull)(NSError * _Nullable, NIMCollectInfo * _Nullable))completion;
/// 添加一条PIN记录
/// \param pinItem 需要添加的PIN记录
///
/// \param completion 完成回调
///
- (void)addMessagePin:(NIMMessagePinItem * _Nonnull)pinItem :(void (^ _Nonnull)(NSError * _Nullable, NIMMessagePinItem * _Nullable))completion;
/// 删除一条PIN记录
/// \param pinItem 需要删除的PIN记录
///
/// \param completion 完成回调
///
- (void)removeMessagePin:(NIMMessagePinItem * _Nonnull)pinItem :(void (^ _Nonnull)(NSError * _Nullable, NIMMessagePinItem * _Nullable))completion;
/// 查询某条消息的PIN记录
/// \param message 消息
///
///
/// returns:
/// 记录
- (NIMMessagePinItem * _Nullable)searchMessagePinHistory:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// \param message 需要收取附件的消息
///
/// \param completion 结果回调
///
- (void)downloadMessageAttachment:(NIMMessage * _Nonnull)message :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 下载文件
/// \param urlString 下载的RL
///
/// \param filePath 下载路径
///
/// \param progress 进度Block
///
/// \param completion 结果回调
///
- (void)downloadSource:(NSString * _Nonnull)urlString :(NSString * _Nonnull)filePath :(NIMHttpProgressBlock _Nullable)progress :(NIMDownloadCompleteBlock _Nullable)completion;
/// 生成转发消息并转发（废弃）
/// \param message 消息
///
/// \param session 接收方
///
- (void)makeForwardMessage:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session SWIFT_DEPRECATED_MSG("Use makeForwardMessage(message: , session: ) instead");
/// 生成转发消息并转发
/// \param message 消息
///
/// \param session 接收方
///
- (void)makeForwardMessageWithMessage:(NIMMessage * _Nonnull)message session:(NIMSession * _Nonnull)session;
/// 仅生成转发消息，不发送
/// \param message 要生成转发消息的消息体
///
- (NIMMessage * _Nullable)makeForwardMessage:(NIMMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 发送生成的转发消息
/// \param message 消息
///
/// \param session 接收方
///
- (void)sendForwardMessage:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session;
/// 发送自定义系统通知（仅支持个人和群。聊天室不支持）
/// \param noti NIMSDK系统通知
///
/// \param session 接收方
///
/// \param completion 回调结果
///
- (void)sendCustomNotification:(NIMCustomSystemNotification * _Nonnull)noti :(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 听筒是否外放
///
/// returns:
/// 是否外放
- (BOOL)getHandsetMode SWIFT_WARN_UNUSED_RESULT;
/// 消息是否已读
///
/// returns:
/// 是否已读
- (BOOL)getMessageRead SWIFT_WARN_UNUSED_RESULT;
/// 保存消息到本地
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     message: 消息对象
///   </li>
///   <li>
///     session: 会话
///   </li>
/// </ul>
- (void)saveMessageToDB:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 主动刷新消息已读回执数量
- (void)refreshReceipts:(NSArray<NIMMessage *> * _Nonnull)messages;
/// 动态途径获取消息，默认回调错误码403，动态能力需要开通功能，并在同步完成后生效
/// @param param
/// @param completion 完成后的回调
- (void)getMessagesDynamically:(NIMGetMessagesDynamicallyParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, BOOL, NSArray<NIMMessage *> * _Nullable))completion;
/// 根据 session 获取 pin 消息列表
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session:     会话 session
///   </li>
///   <li>
///     completion:  完成回调
///   </li>
/// </ul>
- (void)fetchPinMessage:(NSString * _Nonnull)sessionId :(NIMSessionType)sessionType :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMMessagePinItem *> * _Nullable))completion;
/// 根据MessageId等从远端获取消息
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     infos         请求信息
///   </li>
///   <li>
///     syncToDB      是否同步到本地，注:DB标记状态删除的消息无法被同步覆盖
///   </li>
///   <li>
///     completion    完成回调
///   </li>
/// </ul>
- (void)fetchHistoryMessages:(NSArray<NIMChatExtendBasicInfo *> * _Nonnull)infos :(BOOL)syncToDB :(void (^ _Nonnull)(NSError * _Nullable, NSMapTable<NIMChatExtendBasicInfo *, NIMMessage *> * _Nullable))completion;
@end


SWIFT_PROTOCOL("_TtP9NEChatKit23ChatRepoMessageDelegate_")
@protocol ChatRepoMessageDelegate <NSObject>
@optional
- (void)onReceive:(NSArray<NIMMessage *> * _Nonnull)messages;
@end

@class ChatTeamMemberInfoModel;

SWIFT_CLASS("_TtC9NEChatKit17ChatTeamInfoModel")
@interface ChatTeamInfoModel : NSObject
@property (nonatomic, strong) NIMTeam * _Nullable team;
@property (nonatomic, copy) NSArray<ChatTeamMemberInfoModel *> * _Nonnull users;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9NEChatKit23ChatTeamMemberInfoModel")
@interface ChatTeamMemberInfoModel : NSObject
@property (nonatomic, strong) User * _Nullable nimUser;
@property (nonatomic, strong) NIMTeamMember * _Nullable teamMember;
- (NSString * _Nonnull)showNickInTeam SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)showNameInTeam SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)atNameInTeam SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class XNotification;
@class AddFriendRequest;
@class NIMSystemNotification;
@class Team;

SWIFT_CLASS("_TtC9NEChatKit11ContactRepo")
@interface ContactRepo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContactRepo * _Nonnull shared;)
+ (ContactRepo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 收到自定义通知回调
/// @param notification 自定义通知
/// @discussion 这个通知是由开发者服务端/客户端发出,由我们的服务器进行透传的通知,SDK 不负责这个信息的存储，如果需要上层需要存储，需要在这个方法返回前进行存储
- (void)onReceive:(NIMCustomSystemNotification * _Nonnull)notification;
/// 收到系统通知回调
/// @param notification 系统通知
- (void)onRecieveNotificationWithNotification:(XNotification * _Nonnull)notification;
/// 系统通知数量变更回调
/// @param count 总系统通知未读数目
- (void)onNotificationUnreadCountChangedWithCount:(NSInteger)count;
/// 获取好友列表(不包含黑名单中的好友)
/// @param fetch: 是否直接从远端拉取
/// @param local: 是否直接从本地拉取
/// @param completion: 完成回调，包含好友列表
- (void)getFriendList:(BOOL)fetch local:(BOOL)local :(void (^ _Nonnull)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
/// 添加好友
/// @param request    添加好友请求
/// @param completion 完成回调
- (void)addFriendWithRequest:(AddFriendRequest * _Nonnull)request :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 删除好友(默认删除备注)
/// @param userId      好友Id
/// @param deleteAlias 是否同时删除备注
/// @param completion  完成回调
- (void)deleteFriendWithAccount:(NSString * _Nonnull)account deleteAlias:(BOOL)deleteAlias :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 判断是否是我的好友
/// @param account 用户Id
/// @return 是否是我的好友 (云信关系)
- (BOOL)isFriendWithAccount:(NSString * _Nonnull)account SWIFT_WARN_UNUSED_RESULT;
/// 返回所有在黑名单中的用户列表
/// @return 黑名单成员User列表
- (NSArray<User *> * _Nonnull)getBlackList SWIFT_WARN_UNUSED_RESULT;
/// 将用户从黑名单移除
/// @param account        用户Id
/// @param completion    完成回调
- (void)removeBlackListWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 添加用户到黑名单
/// @param account          用户Id
/// @param completion      完成回调
- (void)addBlackListWithAccount:(NSString * _Nonnull)account :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 判断用户是否已被拉黑
/// @param account 用户Id
/// @return 是否已被拉黑
- (BOOL)isBlackListWithAccount:(NSString * _Nonnull)account SWIFT_WARN_UNUSED_RESULT;
/// 获取本地存储的系统通知
/// @param limit        最大获取数
/// @return 系统通知列表
- (NSArray<XNotification *> * _Nonnull)getNotificationListWithLimit:(NSInteger)limit SWIFT_WARN_UNUSED_RESULT;
/// 获取本地存储的系统通知(从远端拉取用户信息)
/// @param limit        最大获取数
/// @return 系统通知列表
- (void)getNotificationListWithLimit:(NSInteger)limit completion:(void (^ _Nonnull)(NSArray<XNotification *> * _Nonnull))completion;
/// 删除所有系统消息
- (void)clearNotification;
/// 修改自己与目标用户的关系
/// @param user       目标用户
/// @param completion 修改结果回调
/// @discussion  这个接口提供了备注名的修改以及一些扩展。这些值是基于当前用户和目标用户关系的，
/// 同一个目标用户的的属性字段会随着登录用户的改变而改变。
- (void)updateUser:(User * _Nonnull)user :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 获取未读系统消息数
/// @return 未读系统消息数
- (NSInteger)getNotificationUnreadCount SWIFT_WARN_UNUSED_RESULT;
/// 标记所有系统消息为已读
- (void)clearNotificationUnreadCount;
/// 标记单条系统消息为已读
/// @param notification 系统消息
- (void)clearSingleNotifyUnreadCountWithNotification:(NIMSystemNotification * _Nonnull)notification;
/// 获取所有群组
/// @return 返回所有群组
- (NSArray<Team *> * _Nonnull)getTeamList SWIFT_WARN_UNUSED_RESULT;
/// 添加通讯录代理
- (void)addContactDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
/// 移除通讯录代理
- (void)removeContactDelegateWithDelegate:(id <FriendProviderDelegate> _Nonnull)delegate;
/// 添加群聊通知代理
- (void)addTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 移除群聊通知代理
- (void)removeTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 获取当前用户的昵称（未设置昵称则返回Id）
- (NSString * _Nonnull)getUserName SWIFT_WARN_UNUSED_RESULT;
/// 接受入群邀请
/// @param teamId     群组ID
/// @param invitorId  邀请者ID
/// @param completion 完成后的回调
- (void)acceptTeamInvite:(NSString * _Nonnull)teamId :(NSString * _Nonnull)invitorId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 拒绝入群邀请
/// @param teamId       群组ID
/// @param invitorId    邀请者ID
/// @param completion   完成后的回调
- (void)rejectTeamInvite:(NSString * _Nonnull)teamId :(NSString * _Nonnull)invitorId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 从本地获取用户资料（本地获取不到，会返回远端数据）
/// \param userId 用户id
///
///
/// returns:
/// 用户信息User（同NIMUser）
- (void)getUserInfo:(NSString * _Nonnull)userId :(void (^ _Nonnull)(NSError * _Nullable, NSArray<User *> * _Nullable))completion;
/// 从远端获取用户信息
/// \param accountList 用户id列表
///
/// \param completion 完成回调
///
- (void)fetchUserInfoWithAccountList:(NSArray<NSString *> * _Nonnull)accountList :(void (^ _Nonnull)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
@end

@class NIMRecentSession;

SWIFT_CLASS("_TtC9NEChatKit21ConversationListModel")
@interface ConversationListModel : NSObject
@property (nonatomic, strong) NIMRecentSession * _Nullable recentSession;
@property (nonatomic, strong) User * _Nullable userInfo;
@property (nonatomic, strong) NIMTeam * _Nullable teamInfo;
@property (nonatomic) NSInteger customType;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable localExtension;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ConversationProvider;
@class ChatProvider;
@protocol ConversationRepoDelegate;
@class NIMAddStickTopSessionParams;
@class NIMStickTopSessionInfo;
@class NIMDeleteRecentSessionOption;
@class NIMUserSearchOption;
@class NIMUser;
@class NIMTeamSearchOption;
@class NIMSyncStickTopSessionResponse;

SWIFT_CLASS("_TtC9NEChatKit16ConversationRepo")
@interface ConversationRepo : NSObject <ChatExtendProviderDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConversationRepo * _Nonnull shared;)
+ (ConversationRepo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 会话Provider
@property (nonatomic, readonly, strong) ConversationProvider * _Nonnull conversationProvider;
/// 聊天Provider
@property (nonatomic, readonly, strong) ChatProvider * _Nonnull chatProvider;
/// 聊天扩展Provider
@property (nonatomic, readonly, strong) ChatExtendProvider * _Nonnull chatExtendProvider;
/// 好友Provider
@property (nonatomic, readonly, strong) FriendProvider * _Nonnull friendProvider;
/// 用户信息Provider
@property (nonatomic, readonly, strong) UserInfoProvider * _Nonnull userProvider;
/// 群组Provider
@property (nonatomic, readonly, strong) TeamProvider * _Nonnull teamProvider;
@property (nonatomic, weak) id <ConversationRepoDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加一条置顶记录
/// \param params 添加置顶的参数
///
/// \param completion 完成回调
///
- (void)addStickTopWithParams:(NIMAddStickTopSessionParams * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 移除一条置顶记录
/// \param params 需要删除的置顶记录
///
/// \param completion 完成回调
///
- (void)removeStickTopWithParams:(NIMStickTopSessionInfo * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 获取所有未读数
/// \param notify 是否是通知
///
///
/// returns:
/// 返回未读数
- (NSInteger)getMsgUnreadCountWithNotify:(BOOL)notify SWIFT_WARN_UNUSED_RESULT;
/// 清空所有未读数
- (void)clearAllUnreadCount;
/// 查找所有的置顶记录
/// \param completion 完成回调
///
- (void)getStickTopSessionList:(void (^ _Nonnull)(NSError * _Nullable, NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nullable))completion;
/// 查询某个会话的置顶信息
/// \param session 需要查询的会话
///
///
/// returns:
/// 置顶信息
- (NIMStickTopSessionInfo * _Nullable)getStickTopSessionInfoWithSession:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 获取会话列表并排序
/// \param completion 完成回调
///
- (void)getSessionList:(void (^ _Nonnull)(NSError * _Nullable, NSArray<ConversationListModel *> * _Nullable))completion;
/// 根据置顶信息排序最近会话
/// \param recentSessions 需要排序的置顶会话
///
/// \param stickTopInfo [会话：置顶信息] 映射
///
///
/// returns:
/// 排序后的最近会话列表，若传如可变数组，则返回其数组本身
- (NSArray<NIMRecentSession *> * _Nonnull)sortSessionListWithRecentSessions:(NSArray<NIMRecentSession *> * _Nonnull)recentSessions stickTopInfo:(NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nonnull)stickTopInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取同步下来的置顶信息
///
/// returns:
/// [会话：置顶信息] 映射
- (NSDictionary<NIMSession *, NIMStickTopSessionInfo *> * _Nonnull)getStickTopInfos SWIFT_WARN_UNUSED_RESULT;
/// 添加会话列表代理
/// \param delegate 代理
///
- (void)addSessionDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
/// 移除会话列表代理
/// \param delegate 代理
///
- (void)removeSessionDelegateWithDelegate:(id <NIMConversationManagerDelegate> _Nonnull)delegate;
/// 增加某个最近会话(Team类型)
/// \param teamid 群组id
///
///
/// returns:
/// 会话
- (NIMSession * _Nonnull)createTeamSession:(NSString * _Nonnull)teamid SWIFT_WARN_UNUSED_RESULT;
/// 删除服务器端最近会话
/// \param sessions 会话参数
///
/// \param completion 完成回调
///
- (void)deleteSessionWithSessions:(NSArray<NIMSession *> * _Nonnull)sessions :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 删除某个最近会话
/// \param recentSession 待删除的最近会话
///
- (void)deleteLocalSessionWithRecentSession:(NIMRecentSession * _Nonnull)recentSession;
/// 删除某个最近会话
/// \param params 参数
///
/// \param option 选项
///
/// \param completion 回调
///
- (void)deleteRecentConversation:(NIMRecentSession * _Nonnull)recentSession :(NIMDeleteRecentSessionOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 从本地获取用户资料（本地获取不到，会返回远端数据）
/// \param userId 用户id
///
///
/// returns:
/// 用户信息User（同NIMUser）
- (void)getUserInfoWithUserId:(NSString * _Nonnull)userId :(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/// 从远端获取用户信息
/// \param accountList 用户id列表
///
/// \param completion 完成回调
///
- (void)fetchUserInfoWithAccountList:(NSArray<NSString *> * _Nonnull)accountList :(void (^ _Nonnull)(NSArray<User *> * _Nullable, NSError * _Nullable))completion;
/// 是否需要消息通知
/// \param userId 用户id
///
///
/// returns:
/// 是否需要消息通知
- (BOOL)isNeedNotifyWithUserId:(NSString * _Nullable)userId SWIFT_WARN_UNUSED_RESULT;
/// 查找成员
/// \param option 查找条件
///
/// \param completion 完成回调
///
- (void)searchUserInfo:(NIMUserSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMUser *> * _Nullable))completion;
/// 添加聊天代理
/// \param delegate 代理
///
- (void)addChatDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
/// 移除聊天代理
/// \param delegate 代理
///
- (void)removeChatDelegateWithDelegate:(id <NIMChatManagerDelegate> _Nonnull)delegate;
/// 添加群组代理
/// \param delegate 代理
///
- (void)addTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 移除群组代理
/// \param delegate 代理
///
- (void)removeTeamDelegateWithDelegate:(id <NIMTeamManagerDelegate> _Nonnull)delegate;
/// 获取指定群ID的群信息（从服务端拉去，不做本地持久化）
/// \param teamsIds 群ID列表,数组元素超过10个会取前10个
///
/// \param completion 完成后回调
///
- (void)getTeamInfoListWithTeamsIds:(NSArray<NSString *> * _Nonnull)teamsIds :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeam *> * _Nullable))completion;
/// 获取群信息
/// \param teamId 群id
///
/// \param completion 完成回调
///
- (void)getTeamInfoWithTeamId:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable, NIMTeam * _Nullable))completion;
/// 群通知状态
/// \param teamId 群id
///
///
/// returns:
/// 完成回调
- (NIMTeamNotifyState)isNeedNotifyForTeamWithTeamId:(NSString * _Nullable)teamId SWIFT_WARN_UNUSED_RESULT;
/// 查询群信息（返回本地缓存的群成员信息，如果本地没有相应数据则返回 nil）
/// \param option 查询选项
///
/// \param completion 完成回调
///
- (void)searchTeam:(NIMTeamSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeam *> * _Nullable))completion;
/// 一条置顶信息被增加的在线通知
/// \param newInfo 新增置顶信息
///
- (void)onNotifyAddStickTopSession:(NIMStickTopSessionInfo * _Nonnull)newInfo;
/// 一条置顶信息被移除的在线通知
/// \param removedInfo 移除置顶信息
///
- (void)onNotifyRemoveStickTopSession:(NIMStickTopSessionInfo * _Nonnull)removedInfo;
/// 置顶会话同步完成的在线通知
/// @param response 置顶信息全量同步后的响应对象
- (void)onNotifySyncStickTopSessions:(NIMSyncStickTopSessionResponse * _Nonnull)response;
/// 保存消息到本地
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     message: 消息对象
///   </li>
///   <li>
///     session: 会话
///   </li>
/// </ul>
- (void)saveMessageToDB:(NIMMessage * _Nonnull)message :(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
@end


SWIFT_PROTOCOL("_TtP9NEChatKit24ConversationRepoDelegate_")
@protocol ConversationRepoDelegate <NSObject>
@optional
/// 一条置顶信息被增加的在线通知
/// \param newInfo 新增的置顶信息
///
- (void)onNotifyAddStickTopSession:(NIMStickTopSessionInfo * _Nonnull)newInfo;
/// 一条置顶信息被移除的在线通知
/// \param removedInfo 被移除的置顶信息
///
- (void)onNotifyRemoveStickTopSession:(NIMStickTopSessionInfo * _Nonnull)removedInfo;
/// 置顶会话同步完成的在线通知
/// @param response 置顶信息全量同步后的响应对象
- (void)onNotifySyncStickTopSessions:(NIMSyncStickTopSessionResponse * _Nonnull)response;
@end


SWIFT_CLASS("_TtC9NEChatKit27ConversationSearchListModel")
@interface ConversationSearchListModel : NSObject
@property (nonatomic, strong) User * _Nullable userInfo;
@property (nonatomic, strong) NIMTeam * _Nullable teamInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9NEChatKit19HistoryMessageModel")
@interface HistoryMessageModel : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable avatar;
@property (nonatomic, copy) NSString * _Nullable content;
@property (nonatomic, copy) NSString * _Nullable time;
@property (nonatomic, strong) NIMMessage * _Nullable imMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NEChatMapProtocol;

SWIFT_CLASS("_TtC9NEChatKit15NEChatKitClient")
@interface NEChatKitClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NEChatKitClient * _Nonnull instance;)
+ (NEChatKitClient * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <NEChatMapProtocol> _Nullable delegate;
/// 添加地图代理
- (void)addMapDelegate:(id <NEChatMapProtocol> _Nonnull)delegate;
/// 移除地图代理
- (void)removeMapDelegate:(id <NEChatMapProtocol> _Nonnull)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NEMapServiceDelegate;
@class UIImage;

SWIFT_PROTOCOL("_TtP9NEChatKit17NEChatMapProtocol_")
@protocol NEChatMapProtocol <NSObject>
@property (nonatomic, weak) id <NEMapServiceDelegate> _Nullable mapService;
@optional
- (void)setupMapSdkConfig;
- (void)setupMapControllerWithMapType:(NSInteger)mapType;
- (id _Nullable)getMapView SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getCellMapView SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getCurrentPositionWithMapview:(id _Nullable)mapview SWIFT_WARN_UNUSED_RESULT;
- (void)searchPositionWithKey:(NSString * _Nonnull)key completion:(void (^ _Nullable)(NSArray<ChatLocaitonModel *> * _Nonnull, NSError * _Nullable))completion;
- (void)searchRoundPositionWithCompletion:(void (^ _Nullable)(NSArray<ChatLocaitonModel *> * _Nonnull, NSError * _Nullable))completion;
- (void)searchMapCenterWithMapview:(id _Nonnull)mapview completion:(void (^ _Nullable)(NSArray<ChatLocaitonModel *> * _Nonnull, NSError * _Nullable))completion;
- (void)didmoveMapWithCompletion:(void (^ _Nullable)(void))completion;
- (void)setMapCenterWithMapview:(id _Nullable)mapview;
- (void)releaseSource;
- (void)startUpdatingLocation;
- (void)stopSerialLocation;
- (void)setMapviewLocationWithLat:(double)lat lng:(double)lng mapview:(id _Nonnull)mapview;
- (void)setCustomAnnotationWithImage:(UIImage * _Nullable)image lat:(double)lat lng:(double)lng;
@end


SWIFT_PROTOCOL("_TtP9NEChatKit20NEMapServiceDelegate_")
@protocol NEMapServiceDelegate <NSObject>
@optional
- (void)searchPositionResultWithResult:(NSArray<ChatLocaitonModel *> * _Nullable)result;
@end

typedef SWIFT_ENUM(NSInteger, NEMapType, open) {
  NEMapTypeDetail = 0,
  NEMapTypeSearch = 1,
};

@class TeamMemberInfoModel;

SWIFT_CLASS("_TtC9NEChatKit13TeamInfoModel")
@interface TeamInfoModel : NSObject
@property (nonatomic, strong) NIMTeam * _Nullable team;
@property (nonatomic, copy) NSArray<TeamMemberInfoModel *> * _Nonnull users;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9NEChatKit19TeamMemberInfoModel")
@interface TeamMemberInfoModel : NSObject
@property (nonatomic, strong) User * _Nullable nimUser;
@property (nonatomic, strong) NIMTeamMember * _Nullable teamMember;
- (NSString * _Nonnull)showNickInTeam SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)showNameInTeam SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)atNameInTeam SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ResourceProvider;
@class NIMCreateTeamOption;

SWIFT_CLASS("_TtC9NEChatKit8TeamRepo")
@interface TeamRepo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TeamRepo * _Nonnull shared;)
+ (TeamRepo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 群组Provider
@property (nonatomic, readonly, strong) TeamProvider * _Nonnull teamProvider;
/// 聊天扩展Provider
@property (nonatomic, readonly, strong) ChatExtendProvider * _Nonnull chatExtendProvider;
/// 聊天Provider
@property (nonatomic, readonly, strong) ChatProvider * _Nonnull chatProvider;
/// 会话Provider
@property (nonatomic, readonly, strong) ConversationProvider * _Nonnull conversationProvider;
/// 好友Provider
@property (nonatomic, readonly, strong) FriendProvider * _Nonnull friendProvider;
/// 用户信息Provider
@property (nonatomic, readonly, strong) UserInfoProvider * _Nonnull userProvider;
/// 资源Provider
@property (nonatomic, readonly, strong) ResourceProvider * _Nonnull resourceProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 创建群组
/// @param accids      用户Accid列表
/// @param option     创建群选项
/// @param completion 完成后的回调
- (void)createAdvanceTeam:(NSArray<NSString *> * _Nonnull)accids :(NIMCreateTeamOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable, NSArray<NSString *> * _Nullable))completion;
/// 从远端获取群信息
/// @param teamId      群组ID
/// @param completion  完成后的回调
- (void)fetchTeamInfo:(NSString * _Nonnull)teamid :(void (^ _Nonnull)(NSError * _Nullable, TeamInfoModel * _Nullable))completion;
/// 分页查询群成员信息
/// @param members          要查询的群成员列表
/// @param model            群信息
/// @param maxSizeByPage    单页最大查询数量
/// @param completion       完成后的回调
- (void)splitGroupMember:(NSArray<NIMTeamMember *> * _Nonnull)members :(TeamInfoModel * _Nonnull)model :(NSInteger)maxSizeByPage :(void (^ _Nonnull)(NSError * _Nullable, TeamInfoModel * _Nullable))completion;
/// 更新群组头像
/// @param url           群组头像Url
/// @param teamId        群组ID
/// @param completion    完成后的回调
- (void)updateTeamIcon:(NSString * _Nonnull)url :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新群介绍
/// @param intr        群介绍
/// @param teamId      群组ID
/// @param completion  完成后的回调
- (void)updateTeamIntroduce:(NSString * _Nonnull)intr :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新群组名称
/// @param teamId       群组ID
/// @param name         群组名称
/// @param completion   完成后的回调
- (void)updateTeamName:(NSString * _Nonnull)teamId :(NSString * _Nonnull)name :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新成员群昵称
/// @param teamId       群组ID
/// @param uid          群成员ID
/// @param newNick      新的群成员昵称
/// @param completion   完成后的回调
- (void)updateMemberNick:(NSString * _Nonnull)teamId :(NSString * _Nonnull)uid :(NSString * _Nonnull)newNick :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更改群组更新信息的权限
/// @param mode           群信息修改权限
/// @param teamId         群组ID
/// @param completion     完成后的回调
- (void)updateTeamInfoPrivilege:(NIMTeamUpdateInfoMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新群组邀请他人方式
/// @param mode  邀请模式
/// @param teamId      群组ID
/// @param completion  完成后的回调
- (void)updateInviteMode:(NIMTeamInviteMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新群自定义信息
/// @param info         群自定义信息
/// @param teamId       群组ID
/// @param completion   完成后的回调
- (void)updateTeamCustomInfo:(NSString * _Nonnull)info :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 解散群组
/// @param teamId      群组ID
/// @param completion  完成后的回调
- (void)dismissTeam:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 退出群组
/// @param teamId     群组ID
/// @param completion 完成后的回调
- (void)quitTeam:(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 获取单个群成员信息
/// @param userId 用户ID
/// @param teamId 群组ID
/// @return       返回成员信息
/// @discussion   返回本地缓存的群成员信息，如果本地没有相应数据则返回 nil。
- (NIMTeamMember * _Nullable)getMemberInfo:(NSString * _Nonnull)userId :(NSString * _Nonnull)teamId SWIFT_WARN_UNUSED_RESULT;
/// 禁言群全体成员
/// @param mute        是否禁言
/// @param teamId      群组ID
/// @param completion  经验操作完成后的回调
/// @discussion   操作成功后，云信服务器会下发禁言的群通知消息
- (void)muteAllMembers:(BOOL)mute :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 修改群通知状态
/// @param state        群通知状态
/// @param teamId       群组ID
/// @param completion   完成后的回调
- (void)setTeamNotify:(NIMTeamNotifyState)state :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 更新群组被邀请人验证方式
/// @param mode         被邀请模式
/// @param teamId       群组ID
/// @param completion   完成后的回调
- (void)updateBeInviteMode:(NIMTeamBeInviteMode)mode :(NSString * _Nonnull)teamId :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 邀请用户入群
/// @param uids       用户ID列表
/// @param teamId      群组ID
/// @param postscript  邀请附言
/// @param attach      扩展消息
/// @param completion  完成后的回调
- (void)inviteUser:(NSArray<NSString *> * _Nonnull)uids :(NSString * _Nonnull)teamId :(NSString * _Nullable)postscript :(NSString * _Nullable)attach :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMTeamMember *> * _Nullable))completion;
/// 发送创建群聊成功的本地提示消息
/// @param teamId      群组ID
/// @param notiText    提示消息文案
/// @param completion  完成后的回调
- (void)sendCreateAdavanceNoti:(NSString * _Nonnull)teamId :(NSString * _Nonnull)notiText :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 判断会话是否已置顶
/// @param session     会话对象
/// @return 会话是否已置顶
- (BOOL)isStickTop:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 从本地获取用户资料
/// \param userId 用户id
///
///
/// returns:
/// 返回自定义用户信息
- (User * _Nullable)getUserInfoWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 搜索本地会话内消息
/// @param session      消息所属的会话
/// @param option       搜索选项
/// @param completion   完成后的回调
- (void)searchMessages:(NIMSession * _Nonnull)session option:(NIMMessageSearchOption * _Nonnull)option :(void (^ _Nonnull)(NSError * _Nullable, NSArray<HistoryMessageModel *> * _Nullable))completion;
/// 添加一条置顶记录
/// @param params     添加置顶的参数
/// @param completion 添加置顶记录完成的回调
- (void)addStickTopWithParams:(NIMAddStickTopSessionParams * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 查询某个会话的置顶信息
/// @param session 需要查询的会话
/// @return        置顶信息
- (NIMStickTopSessionInfo * _Nonnull)getTopSessionInfo:(NIMSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// 删除一条置顶记录
/// @param params     需要删除的置顶记录
/// @param completion 删除完成的回调
- (void)removeStickTopWithParams:(NIMStickTopSessionInfo * _Nonnull)params :(void (^ _Nonnull)(NSError * _Nullable, NIMStickTopSessionInfo * _Nullable))completion;
/// 使用短链换源链
/// @param url          短链
/// @param completion   完成回调
/// @discussion         当用户后台配置了NOS文件安全，文件上传的URL为短链，无法直接下载，可通过该接口换取源链
- (void)fetchNOSURLWithUrl:(NSString * _Nonnull)url :(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable))completion;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
