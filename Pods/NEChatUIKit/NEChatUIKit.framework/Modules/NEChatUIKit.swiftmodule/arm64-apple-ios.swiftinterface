// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NEChatUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreAudio
import CoreGraphics
import CoreText
import Foundation
import Lottie
import MJRefresh
import MobileCoreServices
import NEChatKit
@_exported import NEChatUIKit
@_exported import NECommonKit
@_exported import NECommonUIKit
@_exported import NECoreIMKit
@_exported import NECoreKit
import NIMSDK
import Photos
import SDWebImage
import SDWebImageSVGKitPlugin
import SDWebImageWebPCoder
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import simd
@objc public enum ChatSendMessageStatus : Swift.Int {
  case successed = 0
  case sending
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var messageStatus: NEChatUIKit.ChatSendMessageStatus? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var failBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatBaseViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let navigationView: NECommonUIKit.NENavigationView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatBrokenNetworkView : UIKit.UIView {
  @objc deinit
}
public let chat_cell_margin: Swift.Double
public let chat_content_margin: Swift.Double
public let chat_headWH: Swift.Double
public let chat_timeCellH: Swift.Double
public let chat_pic_size: CoreFoundation.CGSize
public let chat_file_size: CoreFoundation.CGSize
public let chat_min_h: Swift.Double
public let chat_reply_height: Swift.Double
public let chat_content_maxW: (CoreFoundation.CGFloat)
public let chat_text_maxW: CoreFoundation.CGFloat
public let chat_pin_height: Swift.Double
public let chat_full_name_height: Swift.Double
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatCenterTextCell : NEChatUIKit.ChatCornerCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var line: UIKit.UIView
  @objc deinit
}
@objc public protocol ViewModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func dataDidChange()
  @objc func dataDidError(_ error: Swift.Error)
  @objc optional func dataNoMore()
}
public let kScreenWidth: CoreFoundation.CGFloat
public let kScreenHeight: CoreFoundation.CGFloat
public let kUISreenWidthScale: CoreFoundation.CGFloat
public let kUISreenHeightScale: CoreFoundation.CGFloat
public let kNavigationHeight: Swift.Double
public let KStatusBarHeight: CoreFoundation.CGFloat
public let ModuleName: Swift.String
public let file_audio_support: [Swift.String]
public let file_vedio_support: [Swift.String]
public let file_img_support: [Swift.String]
public let file_xls_support: [Swift.String]
public let file_doc_support: [Swift.String]
public let file_ppt_support: [Swift.String]
public let file_txt_support: [Swift.String]
public let file_zip_support: [Swift.String]
public let file_pdf_support: [Swift.String]
public let file_html_support: [Swift.String]
public let kScreenInterval: CoreFoundation.CGFloat
public let NEMoreView_Section_Padding: CoreFoundation.CGFloat
public let NEMoreCell_ReuseId: Swift.String
public let NEMoreCell_Image_Size: CoreFoundation.CGSize
public let NEMoreCell_Title_Height: CoreFoundation.CGFloat
public let NEMoreView_Margin: CoreFoundation.CGFloat
public let NEMoreView_Column_Count: Swift.Int
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatCornerCell : NECommonUIKit.CornerCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatHeaderView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func setTitle(_ name: Swift.String)
  @objc deinit
}
extension UIKit.UIImage {
  public class func ne_imageNamed(name: Swift.String?) -> UIKit.UIImage?
  public class func ne_bundleImage(name: Swift.String) -> UIKit.UIImage
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatImageTextCell : NEChatUIKit.ChatStateCell {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public var avatarImage: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var shortNameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func setup(accid: Swift.String?, nickName: Swift.String?)
  @objc deinit
}
@objc public protocol ChatInputViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func sendText(text: Swift.String?, attribute: Foundation.NSAttributedString?)
  @objc func willSelectItem(button: UIKit.UIButton?, index: Swift.Int)
  @objc func didSelectMoreCell(cell: NEChatUIKit.NEInputMoreCell)
  @objc @discardableResult
  func textChanged(text: Swift.String) -> Swift.Bool
  @objc func textDelete(range: Foundation.NSRange, text: Swift.String) -> Swift.Bool
  @objc func startRecord()
  @objc func moveOutView()
  @objc func moveInView()
  @objc func endRecord(insideView: Swift.Bool)
  @objc func textFieldDidChange(_ textField: UIKit.UITextView)
  @objc func textFieldDidEndEditing(_ textField: UIKit.UITextView)
  @objc func textFieldDidBeginEditing(_ textField: UIKit.UITextView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatInputView : NEChatUIKit.NEBaseChatInputView {
  @_Concurrency.MainActor(unsafe) @objc override public func commonUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageAudioCell : NEChatUIKit.NormalChatMessageBaseCell {
  @_Concurrency.MainActor(unsafe) @objc public var messageId: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc public var isPlaying: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var audioImageViewLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var audioImageViewRight: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelRight: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc open func startAnimation(byRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func stopAnimation(byRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageCallCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) final public let contentLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let contentLabelRight: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageFileCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var imgViewLeft: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewLeft: NECommonUIKit.FileStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sizeLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelViewLeft: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgViewRight: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewRight: NECommonUIKit.FileStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sizeLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelViewRight: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func setupUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func setupUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @_Concurrency.MainActor(unsafe) @objc override open func uploadProgress(byRight: Swift.Bool, _ progress: Swift.Float)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatMessageHelper : ObjectiveC.NSObject {
  @objc public class func getSizeWithMaxSize(_ maxSize: CoreFoundation.CGSize, size: CoreFoundation.CGSize, miniWH: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageImageCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) final public let contentImageViewLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let contentImageViewRight: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageLocationCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mapViewLeft: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mapViewRight: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageReplyCell : NEChatUIKit.ChatMessageTextCell {
  @objc @_Concurrency.MainActor(unsafe) public var replyLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var replyLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageRevokeCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var revokeLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var revokeLabelRight: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var reeditButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var reeditButtonW: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageTextCell : NEChatUIKit.NormalChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var contentLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageTipCell : NEChatUIKit.NEBaseChatMessageTipCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatMessageVideoCell : NEChatUIKit.ChatMessageImageCell {
  @objc @_Concurrency.MainActor(unsafe) public var stateViewLeft: NECommonUIKit.VideoStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeViewLeft: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewRight: NECommonUIKit.VideoStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeViewRight: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func setupUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func setupUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @_Concurrency.MainActor(unsafe) @objc override open func uploadProgress(byRight: Swift.Bool, _ progress: Swift.Float)
  @objc deinit
}
@objc public protocol ChatRecordViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func startRecord()
  @objc func moveOutView()
  @objc func moveInView()
  @objc func endRecord(insideView: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatRecordView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.ChatRecordViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public func stopRecordAnimation()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatSectionView : UIKit.UITableViewHeaderFooterView {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @objc deinit
}
@objc public enum RightStyle : Swift.Int {
  case none = 0
  case indicate
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatStateCell : NEChatUIKit.ChatCornerCell {
  @objc @_Concurrency.MainActor(unsafe) public var rightImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var rightStyle: NEChatUIKit.RightStyle {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatTableViewController : NECommonUIKit.NEBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
  @objc @_Concurrency.MainActor(unsafe) public var topConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bottomConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ChatTeamMemberCell : NEChatUIKit.NEBaseChatTeamMemberCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatTextArrowCell : NEChatUIKit.ChatTextCell {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatTextCell : NEChatUIKit.ChatStateCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var line: UIKit.UIView
  @objc deinit
}
@objc public enum NEChatAvatarType : Swift.Int {
  case rectangle = 1
  case cycle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatUIConfig : ObjectiveC.NSObject {
  @objc public var messageItemClick: ((UIKit.UITableViewCell, NEChatUIKit.MessageContentModel?) -> Swift.Void)?
  @objc public var messageProperties: NEChatUIKit.MessageProperties
  public var chatInputBar: ((inout [UIKit.UIButton]) -> Swift.Void)?
  public var chatInputMenu: ((inout [NEChatUIKit.NEMoreItemModel]) -> Swift.Void)?
  public var chatPopMenu: ((inout [NEChatUIKit.OperationItem], NEChatUIKit.MessageContentModel?) -> Swift.Void)?
  @objc public var popMenuClick: ((NEChatUIKit.OperationItem) -> Swift.Void)?
  @objc public var customController: ((NEChatUIKit.ChatViewController) -> Swift.Void)?
  @objc public var fileSizeLimit: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MessageProperties : ObjectiveC.NSObject {
  @objc public var avatarCornerRadius: CoreFoundation.CGFloat
  public var avatarType: NEChatUIKit.NEChatAvatarType?
  @objc public var signalBgColor: UIKit.UIColor
  @objc public var timeTextColor: UIKit.UIColor
  @objc public var timeTextSize: CoreFoundation.CGFloat
  @objc public var rightBubbleBg: UIKit.UIImage?
  @objc public var leftBubbleBg: UIKit.UIImage?
  @objc public var messageTextSize: CoreFoundation.CGFloat
  @objc public var messageTextColor: UIKit.UIColor
  @objc public var selfMessageBg: UIKit.UIColor
  @objc public var receiveMessageBg: UIKit.UIColor
  @objc public var userNickColor: UIKit.UIColor
  @objc public var userNickTextSize: CoreFoundation.CGFloat
  @objc public var showP2pMessageStatus: Swift.Bool
  @objc public var showTeamMessageStatus: Swift.Bool
  @objc public var showTitleBar: Swift.Bool
  @objc public var showTitleBarRightIcon: Swift.Bool
  @objc public var titleBarRightRes: UIKit.UIImage?
  @objc public var titleBarRightClick: (() -> Swift.Void)?
  @objc public var chatViewBackground: UIKit.UIColor?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatUnfoldCell : NEChatUIKit.ChatCornerCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatUserHeaderView : UIKit.UIImageView {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func setTitle(_ name: Swift.String)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class ChatViewController : NEChatUIKit.ChatBaseViewController, UIKit.UINavigationControllerDelegate, NEChatUIKit.ChatInputViewDelegate, NEChatUIKit.ChatViewModelDelegate, NIMMediaManagerDelegate, NEChatUIKit.MessageOperationViewDelegate, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate, UIKit.UIDocumentPickerDelegate, UIKit.UIDocumentInteractionControllerDelegate, CoreLocation.CLLocationManagerDelegate, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var titleContent: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var viewmodel: NEChatUIKit.ChatViewModel
  @_Concurrency.MainActor(unsafe) public var operationCellFilter: [NEChatUIKit.OperationType]?
  @objc @_Concurrency.MainActor(unsafe) public var cellRegisterDic: [Swift.String : UIKit.UITableViewCell.Type]
  @objc @_Concurrency.MainActor(unsafe) public var operationView: NEChatUIKit.MessageOperationView?
  @objc @_Concurrency.MainActor(unsafe) public var normalOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var bottomExanpndHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var normalInputHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var brokenNetworkViewHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var bodyTopViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyBottomViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyTopViewHeightAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bodyBottomViewHeightAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var contentViewTopAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bottomViewTopAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bottomViewHeightAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @_Concurrency.MainActor(unsafe) @objc open func backEvent()
  @objc @_Concurrency.MainActor(unsafe) open func getSessionInfo(session: NIMSession)
  @objc @_Concurrency.MainActor(unsafe) open func didTapHeadPortrait(model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) open func setOperationItems(items: inout [NEChatUIKit.OperationItem], model: NEChatUIKit.MessageContentModel?)
  @objc @_Concurrency.MainActor(unsafe) open func didLongTouchMessageView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc @_Concurrency.MainActor(unsafe) public var bodyTopView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var brokenNetworkView: NECommonUIKit.NEBrokenNetworkView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyBottomView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var chatInputView: NEChatUIKit.NEBaseChatInputView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func remoteUserEditing()
  @_Concurrency.MainActor(unsafe) @objc open func remoteUserEndEditing()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc open func toSetting()
  @objc @_Concurrency.MainActor(unsafe) open func addBottomLoadMore()
  @objc @_Concurrency.MainActor(unsafe) open func removeBottomLoadMore()
  @objc @_Concurrency.MainActor(unsafe) open func keyBoardWillShow(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) open func keyBoardWillHide(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) open func layoutInputView(offset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc open func sendText(text: Swift.String?, attribute: Foundation.NSAttributedString?)
  @_Concurrency.MainActor(unsafe) @objc open func didSelectMoreCell(cell: NEChatUIKit.NEInputMoreCell)
  @objc @_Concurrency.MainActor(unsafe) open func showTakePicture()
  @objc @_Concurrency.MainActor(unsafe) open func showFileAction()
  @objc @_Concurrency.MainActor(unsafe) open func showRtcCallAction()
  @_Concurrency.MainActor(unsafe) @objc open func textChanged(text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textDelete(range: Foundation.NSRange, text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidChange(_ textField: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func willSelectItem(button: UIKit.UIButton?, index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open func showMenue(sourceView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func willSelectImage()
  @objc @_Concurrency.MainActor(unsafe) open func takePhoto()
  @objc @_Concurrency.MainActor(unsafe) open func clearAtRemind()
  @objc @_Concurrency.MainActor(unsafe) open func sendMediaMessage(didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc open func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) @objc open func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
  @_Concurrency.MainActor(unsafe) @objc open func didLeaveTeam()
  @_Concurrency.MainActor(unsafe) @objc open func didDismissTeam()
  @_Concurrency.MainActor(unsafe) @objc open func onRecvMessages(_ messages: [NIMMessage])
  @_Concurrency.MainActor(unsafe) @objc open func willSend(_ message: NIMMessage)
  @_Concurrency.MainActor(unsafe) @objc open func send(_ message: NIMMessage, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc open func send(_ message: NIMMessage, didCompleteWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func onDeleteMessage(_ message: NIMMessage, atIndexs: [Foundation.IndexPath], reloadIndex: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc open func updateDownloadProgress(_ message: NIMMessage, atIndex: Foundation.IndexPath, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc open func onRevokeMessage(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc open func onAddMessagePin(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc open func onRemoveMessagePin(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @objc @_Concurrency.MainActor(unsafe) open func tableViewDeleteIndexs(_ indexs: [Foundation.IndexPath])
  @objc @_Concurrency.MainActor(unsafe) open func tableViewReloadIndexs(_ indexs: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc open func didReadedMessageIndexs()
  @objc @_Concurrency.MainActor(unsafe) open func tableViewUpdateDownload(_ index: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func didRefreshTable()
  @_Concurrency.MainActor(unsafe) @objc open func startRecord()
  @_Concurrency.MainActor(unsafe) @objc open func moveOutView()
  @_Concurrency.MainActor(unsafe) @objc open func moveInView()
  @_Concurrency.MainActor(unsafe) @objc open func endRecord(insideView: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func viewTap(tap: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) public func stopPlay()
  @_Concurrency.MainActor(unsafe) @objc open func playAudio(_ filePath: Swift.String, didBeganWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func playAudio(_ filePath: Swift.String, didCompletedWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func stopPlayAudio(_ filePath: Swift.String, didCompletedWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func playAudio(_ filePath: Swift.String, progress value: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc open func playAudioInterruptionEnd()
  @_Concurrency.MainActor(unsafe) @objc open func playAudioInterruptionBegin()
  @_Concurrency.MainActor(unsafe) @objc open func recordAudio(_ filePath: Swift.String?, didBeganWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func recordAudio(_ filePath: Swift.String?, didCompletedWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func recordAudioDidCancelled()
  @_Concurrency.MainActor(unsafe) @objc open func recordAudioProgress(_ currentTime: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc open func recordAudioInterruptionBegin()
  @objc @_Concurrency.MainActor(unsafe) open func addToAtUsers(addText: Swift.String, isReply: Swift.Bool = false, accid: Swift.String, _ isLongPress: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc open func didSelectedItem(item: NEChatUIKit.OperationItem)
  @objc @_Concurrency.MainActor(unsafe) open func customOperation()
  @objc @_Concurrency.MainActor(unsafe) open func copyMessage()
  @objc @_Concurrency.MainActor(unsafe) open func deleteMessage()
  @objc @_Concurrency.MainActor(unsafe) open func showReplyMessageView(isReEdit: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func closeReply(button: UIKit.UIButton?)
  @objc @_Concurrency.MainActor(unsafe) open func recallMessage()
  @objc @_Concurrency.MainActor(unsafe) open func collectionMessage()
  @objc @_Concurrency.MainActor(unsafe) open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @objc @_Concurrency.MainActor(unsafe) open func forwardMessage()
  @objc @_Concurrency.MainActor(unsafe) open func pinMessage()
  @objc @_Concurrency.MainActor(unsafe) open func removePinMessage()
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc open func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @_Concurrency.MainActor(unsafe) @objc open func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @_Concurrency.MainActor(unsafe) @objc open func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) open func didTapMessage(_ cell: UIKit.UITableViewCell?, _ model: NEChatUIKit.MessageContentModel?, _ replyIndex: Swift.Int? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func getMenuView() -> NEChatUIKit.NEBaseChatInputView
  @objc @_Concurrency.MainActor(unsafe) open func expandMoreAction()
}
extension NEChatUIKit.ChatViewController : NEChatUIKit.ChatBaseCellDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didLongPressAvatar(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapAvatarView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapMessageView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didLongPressMessageView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapResendView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapReeditButton(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapReadView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func loadDataFinish()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didShowCallView()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didDismissCallView()
}
@objc public enum LoadMessageDirection : Swift.Int {
  case old = 1
  case new
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ChatViewModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onRecvMessages(_ messages: [NIMMessage])
  @objc func willSend(_ message: NIMMessage)
  @objc func send(_ message: NIMMessage, didCompleteWithError error: Swift.Error?)
  @objc func send(_ message: NIMMessage, progress: Swift.Float)
  @objc func didReadedMessageIndexs()
  @objc func onDeleteMessage(_ message: NIMMessage, atIndexs: [Foundation.IndexPath], reloadIndex: [Foundation.IndexPath])
  @objc func onRevokeMessage(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @objc func onAddMessagePin(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @objc func onRemoveMessagePin(_ message: NIMMessage, atIndexs: [Foundation.IndexPath])
  @objc func updateDownloadProgress(_ message: NIMMessage, atIndex: Foundation.IndexPath, progress: Swift.Float)
  @objc func remoteUserEditing()
  @objc func remoteUserEndEditing()
  @objc func didLeaveTeam()
  @objc func didDismissTeam()
  @objc func didRefreshTable()
  @objc optional func getMessageModel(model: NEChatUIKit.MessageModel)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ChatViewModel : ObjectiveC.NSObject, NEChatKit.ChatRepoMessageDelegate, NIMChatManagerDelegate, NIMConversationManagerDelegate, NIMSystemNotificationManagerDelegate, NECoreIMKit.ChatExtendProviderDelegate, NECoreIMKit.FriendProviderDelegate {
  @objc public var team: NIMTeam?
  @objc public var session: NIMSession
  @objc public var messages: [NEChatUIKit.MessageModel]
  @objc weak public var delegate: NEChatUIKit.ChatViewModelDelegate?
  @objc public var newUserInfoDic: [Swift.String : NECoreIMKit.User]
  @objc public var repo: NEChatKit.ChatRepo
  @objc public var operationModel: NEChatUIKit.MessageContentModel?
  @objc public var isReplying: Swift.Bool
  @objc final public let messagPageNum: Swift.UInt
  @objc public var credibleTimestamp: Swift.Double
  @objc public var anchor: NIMMessage?
  @objc public var isHistoryChat: Swift.Bool
  @objc public var filterInviteSet: Swift.Set<Swift.String>
  @objc public var deletingMsgDic: Swift.Set<Swift.String>
  @objc public func sendTextMessage(text: Swift.String, remoteExt: [Swift.String : Any]?, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendTextMessage(text: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendAudioMessage(filePath: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendImageMessage(image: UIKit.UIImage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendVideoMessage(url: Foundation.URL, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendLocationMessage(_ model: NEChatKit.ChatLocaitonModel, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendFileMessage(filePath: Swift.String, displayName: Swift.String?, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func sendFileMessage(data: Foundation.Data, displayName: Swift.String?, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func getMessagesModelDynamically(_ order: NIMMessageSearchOrder, message: NIMMessage?, _ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func queryRoamMsgHasMoreTime_v2(_ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, ObjectiveC.NSInteger, Swift.Int) -> Swift.Void)
  @objc public func getMessageHistory(_ message: NIMMessage?, _ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func getMoreMessageHistory(_ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func getRemoteHistoryMessage(direction: NEChatUIKit.LoadMessageDirection, updateCredible: Swift.Bool, option: NIMHistoryMessageSearchOption, _ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func dropDownRemoteRefresh(_ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func pullRemoteRefresh(_ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func searchMessageHistory(direction: NEChatUIKit.LoadMessageDirection, startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, _ completion: @escaping (Swift.Error?, ObjectiveC.NSInteger, [NEChatUIKit.MessageModel]?) -> Swift.Void)
  @objc public func isMessageCredible(message: NIMMessage) -> Swift.Bool
  @objc public func markRead(messages: [NIMMessage], _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func deleteMessage(message: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func replyMessage(_ message: NIMMessage, _ target: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func replyMessageWithoutThread(message: NIMMessage, target: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func revokeMessage(message: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func resendMessage(message: NIMMessage) -> Foundation.NSError?
  @objc public func getUserInfo(userId: Swift.String) -> NECoreIMKit.User?
  @objc public func getTeamMember(userId: Swift.String, teamId: Swift.String) -> NIMTeamMember?
  @objc public func onReceive(_ notification: NIMCustomSystemNotification)
  @objc public func onFriendChanged(user: NECoreIMKit.User)
  @objc public func onUserInfoChanged(user: NECoreIMKit.User)
  @objc public func onBlackListChanged()
  @objc public func onRecvMessages(_ messages: [NIMMessage])
  @objc public func willSend(_ message: NIMMessage)
  @objc public func send(_ message: NIMMessage, progress: Swift.Float)
  @objc open func send(_ message: NIMMessage, didCompleteWithError error: Swift.Error?)
  @objc public func onNotifyAddMessagePin(pinItem: NIMMessagePinItem)
  @objc public func onNotifyRemoveMessagePin(pinItem: NIMMessagePinItem)
  @objc public func onNotifySyncStickTopSessions(_ response: NIMSyncStickTopSessionResponse)
  @objc public func onNotifyAddStickTopSession(_ newInfo: NIMStickTopSessionInfo)
  @objc public func onNotifyRemoveStickTopSession(_ removedInfo: NIMStickTopSessionInfo)
  @objc public func onRecvRevokeMessageNotification(_ notification: NIMRevokeMessageNotification)
  @objc public func onRecvMessageReceipts(_ receipts: [NIMMessageReceipt])
  @objc public func avalibleOperationsForMessage(_ model: NEChatUIKit.MessageContentModel?) -> [NEChatUIKit.OperationItem]?
  @objc public func getReplyMessage(message: NIMMessage) -> NEChatUIKit.MessageModel?
  @objc public func getReplyMessageWithoutThread(message: NIMMessage) -> NEChatUIKit.MessageModel?
  @objc public func getUserInfo(_ userId: Swift.String, _ completion: @escaping (NECoreIMKit.User?, Foundation.NSError?) -> Swift.Void)
  @objc public func fetchMessageAttachment(_ message: NIMMessage, didCompleteWithError error: Swift.Error?)
  @objc public func fetchMessageAttachment(_ message: NIMMessage, progress: Swift.Float)
  @objc public func fetchMessageAttachment(_ message: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func downLoad(_ urlString: Swift.String, _ filePath: Swift.String, _ progress: NIMHttpProgressBlock?, _ completion: NIMDownloadCompleteBlock?)
  @objc public func getUrls() -> [Swift.String]
  @objc public func forwardUserMessage(_ message: NIMMessage, _ users: [NIMUser])
  @objc public func forwardTeamMessage(_ message: NIMMessage, _ team: NIMTeam)
  @objc public func pinMessage(_ message: NIMMessage, _ completion: @escaping (Swift.Error?, NIMMessagePinItem?, Swift.Int) -> Swift.Void)
  @objc public func removePinMessage(_ message: NIMMessage, _ completion: @escaping (Swift.Error?, NIMMessagePinItem?, Swift.Int) -> Swift.Void)
  @objc public func sendInputTypingState()
  @objc public func sendInputTypingEndState()
  @objc public func getHandSetEnable() -> Swift.Bool
  @objc public func getMessageRead() -> Swift.Bool
  @objc public func saveRevokeMessage(_ message: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func refreshReceipts(messages: [NIMMessage])
  @objc public func onRecvMessagesDeleted(_ messages: [NIMMessage], exts: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class CirleProgressView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var progress: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var borderLayer: QuartzCore.CAShapeLayer
  @objc @_Concurrency.MainActor(unsafe) public var sectorLayer: QuartzCore.CAShapeLayer
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class CopyableLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc deinit
}
@objc public protocol EmojiPageViewDataSource : ObjectiveC.NSObjectProtocol {
  @objc optional func numberOfPages(pageView: NEChatUIKit.EmojiPageView?) -> ObjectiveC.NSInteger
  @objc optional func pageView(pageView: NEChatUIKit.EmojiPageView?, index: ObjectiveC.NSInteger) -> UIKit.UIView
}
@objc public protocol EmojiPageViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func pageViewScrollEnd(_ pageView: NEChatUIKit.EmojiPageView?, currentIndex: Swift.Int, totolPages: Swift.Int)
  @objc optional func pageViewDidScroll(_ pageView: NEChatUIKit.EmojiPageView?)
  @objc optional func needScrollAnimation() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EmojiPageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var dataSource: NEChatUIKit.EmojiPageViewDataSource?
  @_Concurrency.MainActor(unsafe) weak public var pageViewDelegate: NEChatUIKit.EmojiPageViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func scrollToPage(page: ObjectiveC.NSInteger)
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension NEChatUIKit.EmojiPageView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ForwardUserCell : NEChatUIKit.NEBaseForwardUserCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ForwardAlertViewController : NEChatUIKit.NEBaseForwardAlertViewController {
  @_Concurrency.MainActor(unsafe) @objc override public func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol FunChatInputViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func recordModeChangeDidClick()
  @objc func didHideReplyMode()
  @objc func didShowReplyMode()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatInputView : NEChatUIKit.NEBaseChatInputView {
  @objc @_Concurrency.MainActor(unsafe) public var replyBackView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var replyLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var clearBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var changeRecordModeBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var showMoreActionBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var showEmojBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var holdToSpeakView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func changeToRecordMode(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) open func clearReplyMode()
  @objc @_Concurrency.MainActor(unsafe) open func showRecordMode()
  @objc @_Concurrency.MainActor(unsafe) open func hideRecordMode()
  @objc @_Concurrency.MainActor(unsafe) open func showReplyMode()
  @objc @_Concurrency.MainActor(unsafe) open func hideReplyMode()
  @objc @_Concurrency.MainActor(unsafe) open func isRecordMode() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageAudioCell : NEChatUIKit.FunChatMessageBaseCell {
  @_Concurrency.MainActor(unsafe) @objc public var messageId: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc public var isPlaying: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var audioImageViewLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var audioImageViewRight: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelRight: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc open func startAnimation(byRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func stopAnimation(byRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageBaseCell : NEChatUIKit.NEBaseChatMessageCell {
  @objc @_Concurrency.MainActor(unsafe) final public let funMargin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override open func initProperty()
  @_Concurrency.MainActor(unsafe) @objc override open func baseCommonUI()
  @_Concurrency.MainActor(unsafe) @objc override open func initSubviewsLayout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageCallCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) final public let contentLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let contentLabelRight: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageFileCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var imgViewLeft: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewLeft: NECommonUIKit.FileStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sizeLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelViewLeft: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgViewRight: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewRight: NECommonUIKit.FileStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sizeLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var labelViewRight: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func setupUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func setupUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @_Concurrency.MainActor(unsafe) @objc override open func uploadProgress(byRight: Swift.Bool, _ progress: Swift.Float)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageImageCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) final public let contentImageViewLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let contentImageViewRight: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageLocationCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mapViewLeft: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) public var titleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mapViewRight: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageReplyCell : NEChatUIKit.FunChatMessageTextCell {
  @objc @_Concurrency.MainActor(unsafe) public var replyLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var replyTextViewLeft: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var replyLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var replyTextViewRight: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func addReplyGesture()
  @objc @_Concurrency.MainActor(unsafe) open func tapReplyView(tap: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageRevokeCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var revokeLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var revokeLabelRight: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var reeditButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func commonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func commonUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageTextCell : NEChatUIKit.FunChatMessageBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var contentLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @_Concurrency.MainActor(unsafe) @objc override open func showLeftOrRight(showRight: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageTipCell : NEChatUIKit.NEBaseChatMessageTipCell {
  @_Concurrency.MainActor(unsafe) @objc override open func commonUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatMessageVideoCell : NEChatUIKit.FunChatMessageImageCell {
  @objc @_Concurrency.MainActor(unsafe) public var stateViewLeft: NECommonUIKit.VideoStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelLeft: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeViewLeft: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateViewRight: NECommonUIKit.VideoStateView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabelRight: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeViewRight: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func setupUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func setupUIRight()
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @_Concurrency.MainActor(unsafe) @objc override open func uploadProgress(byRight: Swift.Bool, _ progress: Swift.Float)
  @objc deinit
}
extension NEChatUIKit.ChatRouter {
  @objc public static func registerFun()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatTeamMemberCell : NEChatUIKit.NEBaseChatTeamMemberCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  public static let funChatInputBg: UIKit.UIColor
  public static let funChatInputReplyBg: UIKit.UIColor
  public static let funChatInputHoldspeakBg: UIKit.UIColor
  public static let funChatInputHoldspeakTextColor: UIKit.UIColor
  public static let funChatInputMoreActionViewLineColor: UIKit.UIColor
  public static let funRecordAudioViewBg: UIKit.UIColor
  public static let funRecordAudioTextColor: UIKit.UIColor
  public static let funRecordAudioProgressNormalColor: UIKit.UIColor
  public static let funRecordAudioProgressCancelColor: UIKit.UIColor
  public static let funRecordAudioLastTimeColor: UIKit.UIColor
  public static let funChatThemeColor: UIKit.UIColor
  public static let funChatBackgroundColor: UIKit.UIColor
  public static let funChatLineBorderColor: UIKit.UIColor
  public static let funChatNavigationBottomLineColor: UIKit.UIColor
  public static let funChatInputViewPlaceholderTextColor: UIKit.UIColor
  public static let funChatInputViewBackgroundColorInMute: UIKit.UIColor
  public static let funChatNetworkBrokenBackgroundColor: UIKit.UIColor
  public static let funChatNetworkBrokenTitleColor: UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunChatViewController : NEChatUIKit.ChatViewController, NEChatUIKit.FunChatInputViewDelegate, NIMUserManagerDelegate, NEChatUIKit.FunChatRecordViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var recordView: NEChatUIKit.FunRecordAudioView?
  @objc @_Concurrency.MainActor(unsafe) public var currentKeyboardHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override open func getMenuView() -> NEChatUIKit.NEBaseChatInputView
  @_Concurrency.MainActor(unsafe) @objc override open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @_Concurrency.MainActor(unsafe) @objc open func recordModeChangeDidClick()
  @_Concurrency.MainActor(unsafe) @objc open func didHideReplyMode()
  @_Concurrency.MainActor(unsafe) @objc public func didShowReplyMode()
  @_Concurrency.MainActor(unsafe) @objc override open func expandMoreAction()
  @_Concurrency.MainActor(unsafe) @objc override open func showRtcCallAction()
  @_Concurrency.MainActor(unsafe) @objc override open func forwardMessage()
  @_Concurrency.MainActor(unsafe) @objc override open func toSetting()
  @_Concurrency.MainActor(unsafe) @objc override open func keyBoardWillShow(_ notification: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) @objc override open func keyBoardWillHide(_ notification: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc @_Concurrency.MainActor(unsafe) open func holdToSpeak(gesture: UIKit.UILongPressGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override open func showTakePicture()
  @_Concurrency.MainActor(unsafe) @objc override open func showFileAction()
  @objc @_Concurrency.MainActor(unsafe) open func showRecordView()
  @objc @_Concurrency.MainActor(unsafe) open func removeRecordView()
  @_Concurrency.MainActor(unsafe) @objc public func didEndRecord(view: NEChatUIKit.FunRecordAudioView)
  @_Concurrency.MainActor(unsafe) @objc override open func closeReply(button: UIKit.UIButton?)
  @_Concurrency.MainActor(unsafe) @objc override open func showReplyMessageView(isReEdit: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didTapReadView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc public func getMessageModel(model: NEChatUIKit.MessageModel)
  @_Concurrency.MainActor(unsafe) @objc override open func addToAtUsers(addText: Swift.String, isReply: Swift.Bool = false, accid: Swift.String, _ isLongPress: Swift.Bool = false)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class FunForwardUserCell : NEChatUIKit.NEBaseForwardUserCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class FunForwardAlertViewController : NEChatUIKit.NEBaseForwardAlertViewController {
  @_Concurrency.MainActor(unsafe) @objc override public func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class FunGroupChatViewController : NEChatUIKit.FunChatViewController, NEChatUIKit.TeamChatViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession, anchor: NIMMessage?)
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getSessionInfo(session: NIMSession)
  @objc @_Concurrency.MainActor(unsafe) open func updateTeamInfo(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc open func onTeamRemoved(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc open func onTeamUpdate(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc public func onTeamMemberUpdate(team: NIMTeam)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunP2PChatViewController : NEChatUIKit.FunChatViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession, anchor: NIMMessage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getSessionInfo(session: NIMSession)
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageAudioCell : NEChatUIKit.NEBasePinMessageAudioCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageDefaultCell : NEChatUIKit.NEBasePinMessageTextCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageFileCell : NEChatUIKit.NEBasePinMessageFileCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageImageCell : NEChatUIKit.NEBasePinMessageImageCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageLocationCell : NEChatUIKit.NEBasePinMessageLocationCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageTextCell : NEChatUIKit.NEBasePinMessageTextCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageVideoCell : NEChatUIKit.NEBasePinMessageVideoCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPinMessageViewController : NEChatUIKit.NEBasePinMessageViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getRegisterCellDic() -> [Swift.Int : NEChatUIKit.NEBasePinMessageCell.Type]
  @_Concurrency.MainActor(unsafe) @objc override open func showAction(item: NEChatUIKit.PinMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @_Concurrency.MainActor(unsafe) @objc override open func forwardMessage(_ message: NIMMessage)
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunReadViewController : NEChatUIKit.NEBaseReadViewController {
  @_Concurrency.MainActor(unsafe) @objc override public func commonUI()
  @_Concurrency.MainActor(unsafe) @objc override public func readButtonEvent(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) @objc override public func unreadButtonEvent(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol FunChatRecordViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didEndRecord(view: NEChatUIKit.FunRecordAudioView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunRecordAudioView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.FunChatRecordViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var maxDuration: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public var lastTimeDuration: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public var timer: Foundation.Timer?
  @objc @_Concurrency.MainActor(unsafe) public var maxRecordProgressMargin: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var minRecordProgressWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var triangleView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var recordProgressView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let recordGestureArea: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let recordCloseImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let releaseToSendLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let releaseToCancelLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let lastTimeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) public func changeToCancelStyle()
  @objc @_Concurrency.MainActor(unsafe) public func changeToNormalStyle()
  @objc @_Concurrency.MainActor(unsafe) public func isRecordNormalStyle() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunSelectUserViewController : NEChatUIKit.NEBaseSelectUserViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunUserSettingSelectCell : NEChatUIKit.NEBaseUserSettingSelectCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunUserSettingSwitchCell : NEChatUIKit.NEBaseUserSettingSwitchCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunUserSettingViewController : NEChatUIKit.NEBaseUserSettingViewController {
  @_Concurrency.MainActor(unsafe) @objc override public init(userId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override public func headerView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override public func filterStackViewController() -> [UIKit.UIViewController]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunUserTableViewCell : NEChatUIKit.UserBaseTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override open func baseCommonUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class GroupChatViewController : NEChatUIKit.NormalChatViewController, NEChatUIKit.TeamChatViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession, anchor: NIMMessage?)
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getSessionInfo(session: NIMSession)
  @objc @_Concurrency.MainActor(unsafe) open func updateTeamInfo(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc open func onTeamRemoved(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc open func onTeamUpdate(team: NIMTeam)
  @_Concurrency.MainActor(unsafe) @objc public func onTeamMemberUpdate(team: NIMTeam)
  @objc deinit
}
@objc public protocol InputEmoticonContainerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func selectedEmoticon(emoticonID: Swift.String, emotCatalogID: Swift.String, description: Swift.String)
  @objc func didPressSend(sender: UIKit.UIButton)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputEmoticonContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.InputEmoticonContainerViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension NEChatUIKit.InputEmoticonContainerView : NEChatUIKit.EmojiPageViewDelegate, NEChatUIKit.EmojiPageViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfPages(pageView: NEChatUIKit.EmojiPageView?) -> ObjectiveC.NSInteger
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageView(pageView: NEChatUIKit.EmojiPageView?, index: ObjectiveC.NSInteger) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc dynamic public func needScrollAnimation() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewDidScroll(_ pageView: NEChatUIKit.EmojiPageView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewScrollEnd(_ pageView: NEChatUIKit.EmojiPageView?, currentIndex: Swift.Int, totolPages: Swift.Int)
}
extension NEChatUIKit.InputEmoticonContainerView : NEChatUIKit.InputEmoticonTabViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tabView(_ tabView: NEChatUIKit.InputEmoticonTabView?, didSelectTabIndex index: Swift.Int)
}
extension NEChatUIKit.InputEmoticonContainerView : NEChatUIKit.NIMInputEmoticonButtonDelegate {
  @_Concurrency.MainActor(unsafe) public func selectedEmoticon(emotion: NEChatUIKit.NIMInputEmoticon, catalogID: Swift.String)
}
@objc public protocol InputEmoticonTabViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func tabView(_ tabView: NEChatUIKit.InputEmoticonTabView?, didSelectTabIndex index: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputEmoticonTabView : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.InputEmoticonTabViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func selectTabIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func loadCatalogs(_ emoticonCatalogs: [NEChatUIKit.NIMInputEmoticonCatalog]?)
  @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton {
    get
    set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MessageAtCacheModel : ObjectiveC.NSObject {
  @objc public var atModel: NEChatUIKit.MessageAtInfoModel
  @objc public var accid: Swift.String
  @objc public var text: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MessageAtInfoModel : ObjectiveC.NSObject {
  @objc public var start: Swift.Int
  @objc public var end: Swift.Int
  @objc public var broken: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MessageContentModel : ObjectiveC.NSObject, NEChatUIKit.MessageModel {
  @objc public var offset: CoreFoundation.CGFloat
  @objc public func cellHeight() -> CoreFoundation.CGFloat
  @objc public var isReplay: Swift.Bool
  @objc public var pinAccount: Swift.String?
  @objc public var pinShowName: Swift.String?
  @objc public var type: NEChatUIKit.MessageType
  @objc public var message: NIMMessage?
  @objc public var contentSize: CoreFoundation.CGSize
  @objc public var height: Swift.Float
  @objc public var shortName: Swift.String?
  @objc public var fullName: Swift.String?
  @objc public var avatar: Swift.String?
  @objc public var replyText: Swift.String?
  @objc public var fullNameHeight: Swift.Float
  @objc public var isRevokedText: Swift.Bool
  @objc public var timeOut: Swift.Bool
  @objc public var replyedModel: NEChatUIKit.MessageModel? {
    @objc get
    @objc set
  }
  @objc public var isRevoked: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isPined: Swift.Bool {
    @objc get
    @objc set
  }
  @objc required public init(message: NIMMessage?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MessageCustomModel : NEChatUIKit.MessageContentModel {
  @objc deinit
}
@objc public enum MessageType : Swift.Int {
  case text = 1
  case image
  case audio
  case video
  case location
  case notification
  case file
  case tip
  case robot
  case rtcCallRecord
  case custom
  case time
  case revoke
  case reply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MessageModel : ObjectiveC.NSObjectProtocol {
  @objc var message: NIMMessage? { get set }
  @objc var contentSize: CoreFoundation.CGSize { get set }
  @objc var height: Swift.Float { get set }
  @objc var shortName: Swift.String? { get set }
  @objc var fullName: Swift.String? { get set }
  @objc var avatar: Swift.String? { get set }
  @objc var type: NEChatUIKit.MessageType { get set }
  @objc var isRevoked: Swift.Bool { get set }
  @objc var isPined: Swift.Bool { get set }
  @objc var pinAccount: Swift.String? { get set }
  @objc var pinShowName: Swift.String? { get set }
  @objc var replyedModel: NEChatUIKit.MessageModel? { get set }
  @objc var replyText: Swift.String? { get set }
  @objc var isRevokedText: Swift.Bool { get set }
  @objc var isReplay: Swift.Bool { get set }
  @objc init(message: NIMMessage?)
  @objc var offset: CoreFoundation.CGFloat { get set }
  @objc func cellHeight() -> CoreFoundation.CGFloat
}
@objc public protocol MessageOperationViewDelegate {
  @objc func didSelectedItem(item: NEChatUIKit.OperationItem)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MessageOperationView : UIKit.UIView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.MessageOperationViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var items: [NEChatUIKit.OperationItem] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MessageUtils : ObjectiveC.NSObject {
  @objc public class func textMessage(text: Swift.String) -> NIMMessage
  @objc public class func textMessage(text: Swift.String, remoteExt: [Swift.String : Any]?) -> NIMMessage
  @objc public class func imageMessage(image: UIKit.UIImage) -> NIMMessage
  @objc public class func imageMessage(path: Swift.String) -> NIMMessage
  @objc public class func imageMessage(imageObject: NIMImageObject) -> NIMMessage
  @objc public class func audioMessage(filePath: Swift.String) -> NIMMessage
  @objc public class func videoMessage(filePath: Swift.String) -> NIMMessage
  @objc public class func locationMessage(_ lat: Swift.Double, _ lng: Swift.Double, _ title: Swift.String, _ address: Swift.String) -> NIMMessage
  @objc public class func fileMessage(filePath: Swift.String, displayName: Swift.String?) -> NIMMessage
  @objc public class func fileMessage(data: Foundation.Data, displayName: Swift.String?) -> NIMMessage
  @objc public class func messageSetting() -> NIMMessageSetting
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ChatMenuType : Swift.Int {
  case text = 0
  case audio
  case emoji
  case image
  case addMore
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let yxAtMsg: Swift.String
public let atRangeOffset: Swift.Int
public let atSegmentsKey: Swift.String
public let atTextKey: Swift.String
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseChatInputView : UIKit.UIView, NEChatUIKit.ChatRecordViewDelegate, NEChatUIKit.InputEmoticonContainerViewDelegate, UIKit.UITextViewDelegate, NEChatUIKit.NEMoreViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.ChatInputViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var currentType: NEChatUIKit.ChatMenuType
  @objc @_Concurrency.MainActor(unsafe) public var currentButton: UIKit.UIButton?
  @objc @_Concurrency.MainActor(unsafe) public var menuHeight: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var contentHeight: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var atCache: NECommonKit.NIMInputAtCache?
  @objc @_Concurrency.MainActor(unsafe) public var atRangeCache: [Swift.String : NEChatUIKit.MessageAtCacheModel]
  @objc @_Concurrency.MainActor(unsafe) public var nickAccidDic: [Swift.String : Swift.String]
  @objc @_Concurrency.MainActor(unsafe) public var textView: NECommonKit.NETextView
  @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @objc @_Concurrency.MainActor(unsafe) public var contentSubView: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) public var greyView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var recordView: NEChatUIKit.ChatRecordView
  @objc @_Concurrency.MainActor(unsafe) public var textInput: UIKit.UITextInput?
  @objc @_Concurrency.MainActor(unsafe) public var textviewLeftConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var textviewRightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) public func addRecordView()
  @objc @_Concurrency.MainActor(unsafe) public func addEmojiView()
  @objc @_Concurrency.MainActor(unsafe) public func addMoreActionView()
  @objc @_Concurrency.MainActor(unsafe) public var emojiView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var chatAddMoreView: NEChatUIKit.NEChatMoreActionView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func checkRemoveAtMessage(range: Foundation.NSRange, attribute: Foundation.NSAttributedString) -> Foundation.NSRange?
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func buttonEvent(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) @objc public func selectedEmoticon(emoticonID: Swift.String, emotCatalogID: Swift.String, description: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func didPressSend(sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public func stopRecordAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func moreViewDidSelectMoreCell(moreView: NEChatUIKit.NEChatMoreActionView, cell: NEChatUIKit.NEInputMoreCell)
  @_Concurrency.MainActor(unsafe) @objc public func startRecord()
  @_Concurrency.MainActor(unsafe) @objc public func moveOutView()
  @_Concurrency.MainActor(unsafe) @objc public func moveInView()
  @_Concurrency.MainActor(unsafe) @objc public func endRecord(insideView: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func getRemoteExtension(_ attri: Foundation.NSAttributedString?) -> [Swift.String : Any]?
  @objc @_Concurrency.MainActor(unsafe) public func getAtRemoteExtension() -> [Swift.String : Any]?
  @objc @_Concurrency.MainActor(unsafe) public func cleartAtCache()
}
@objc public protocol ChatBaseCellDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didTapAvatarView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didLongPressAvatar(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didTapMessageView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didLongPressMessageView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didTapResendView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didTapReeditButton(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @objc func didTapReadView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseChatMessageCell : NEChatUIKit.NEChatBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public var seletedBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.ChatBaseCellDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var contentModel: NEChatUIKit.MessageContentModel?
  @objc @_Concurrency.MainActor(unsafe) public var avatarImageLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var nameLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var bubbleImageLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var bubbleTopAnchorLeft: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bubbleWLeft: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bubbleHLeft: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var pinImageLeft: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var pinLabelLeft: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var fullNameLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var fullNameH: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var avatarImageRight: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var nameLabelRight: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var bubbleImageRight: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var bubbleWRight: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bubbleHRight: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var pinImageRight: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var pinLabelRight: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var readView: NEChatUIKit.CirleProgressView
  @objc @_Concurrency.MainActor(unsafe) public var activityView: NEChatUIKit.ChatActivityIndicatorView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func initProperty()
  @objc @_Concurrency.MainActor(unsafe) open func baseCommonUI()
  @objc @_Concurrency.MainActor(unsafe) open func baseCommonUILeft()
  @objc @_Concurrency.MainActor(unsafe) open func baseCommonUIRight()
  @objc @_Concurrency.MainActor(unsafe) open func addGesture()
  @objc @_Concurrency.MainActor(unsafe) open func initSubviewsLayout()
  @objc @_Concurrency.MainActor(unsafe) open func tapAvatar(tap: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func tapMessage(tap: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func longPressAvatar(longPress: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func longPress(longPress: UIKit.UILongPressGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func resend(button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) open func tapReadView(tap: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc @_Concurrency.MainActor(unsafe) open func showLeftOrRight(showRight: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func updatePinStatus(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseChatMessageTipCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatRouter : ObjectiveC.NSObject {
  @objc public static func setupInit()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseChatTeamMemberCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var headerView: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ model: NEChatKit.ChatTeamMemberInfoModel)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ForwardItem : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEBaseForwardUserCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEBaseForwardAlertViewController : UIKit.UIViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc @_Concurrency.MainActor(unsafe) final public let sureBtn: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) final public let tip: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func setupUI()
  @objc @_Concurrency.MainActor(unsafe) public func setItems(_ items: [NEChatUIKit.ForwardItem])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open func setCellModel(cell: NEChatUIKit.NEBaseForwardUserCell, indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageAudioCell : NEChatUIKit.NEBasePinMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var bubbleImage: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc public protocol PinMessageCellDelegate {
  @objc func didClickMore(_ model: NEChatUIKit.PinMessageModel?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var contentWidth: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var contentHeight: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var pinModel: NEChatUIKit.PinMessageModel?
  @objc @_Concurrency.MainActor(unsafe) public var delegate: NEChatUIKit.PinMessageCellDelegate?
  @objc @_Concurrency.MainActor(unsafe) final public let backView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let line: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var backLeftConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var backRightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageDefaultCell : NEChatUIKit.NEBasePinMessageTextCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageFileCell : NEChatUIKit.NEBasePinMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var bubbleImage: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageImageCell : NEChatUIKit.NEBasePinMessageCell {
  @objc @_Concurrency.MainActor(unsafe) final public let contentImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageLocationCell : NEChatUIKit.NEBasePinMessageCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageTextCell : NEChatUIKit.NEBasePinMessageCell {
  @objc @_Concurrency.MainActor(unsafe) final public let replyLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageVideoCell : NEChatUIKit.NEBasePinMessageImageCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override public func configure(_ item: NEChatUIKit.PinMessageModel)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePinMessageViewController : NEChatUIKit.ChatBaseViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate, NEChatUIKit.PinMessageViewModelDelegate, NEChatUIKit.PinMessageCellDelegate {
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: NECommonUIKit.NEEmptyDataView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func showAction(item: NEChatUIKit.PinMessageModel)
  @objc @_Concurrency.MainActor(unsafe) open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @objc @_Concurrency.MainActor(unsafe) open func forwardMessage(_ message: NIMMessage)
  @_Concurrency.MainActor(unsafe) @objc public func didNeedRefreshUI()
  @_Concurrency.MainActor(unsafe) @objc public func didClickMore(_ model: NEChatUIKit.PinMessageModel?)
  @objc @_Concurrency.MainActor(unsafe) open func getRegisterCellDic() -> [Swift.Int : NEChatUIKit.NEBasePinMessageCell.Type]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseReadViewController : NEChatUIKit.ChatBaseViewController, UIKit.UIScrollViewDelegate, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var read: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var line: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var lineLeftCons: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var readTableView: UIKit.UITableView
  @objc @_Concurrency.MainActor(unsafe) public var readUsers: [NECoreIMKit.User]
  @objc @_Concurrency.MainActor(unsafe) public var unReadUsers: [NECoreIMKit.User]
  @objc @_Concurrency.MainActor(unsafe) final public let readButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) final public let unreadButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func commonUI()
  @objc @_Concurrency.MainActor(unsafe) open func readButtonEvent(button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) open func unreadButtonEvent(button: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: NECommonUIKit.NEEmptyDataView {
    @objc get
    @objc set
  }
  @objc deinit
}
public typealias DidSelectedAtRow = (_ index: Swift.Int, _ model: NEChatKit.ChatTeamMemberInfoModel?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseSelectUserViewController : NEChatUIKit.ChatBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
  @objc @_Concurrency.MainActor(unsafe) public var sessionId: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: NEChatUIKit.TeamMemberSelectVM
  @objc @_Concurrency.MainActor(unsafe) public var selectedBlock: NEChatUIKit.DidSelectedAtRow?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseUserSettingCell : NECommonUIKit.CornerCell {
  @objc @_Concurrency.MainActor(unsafe) public var model: NEChatUIKit.UserSettingCellModel?
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var arrow: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ anyModel: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseUserSettingSelectCell : NEChatUIKit.NEBaseUserSettingCell {
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc override open func configure(_ anyModel: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseUserSettingSwitchCell : NEChatUIKit.NEBaseUserSettingCell {
  @objc @_Concurrency.MainActor(unsafe) public var tSwitch: UIKit.UISwitch
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func configure(_ anyModel: Any)
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func switchChange(_ s: UIKit.UISwitch)
  @objc deinit
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseUserSettingViewController : NEChatUIKit.ChatBaseViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var userId: Swift.String?
  @_Concurrency.MainActor(unsafe) public var cellClassDic: [Swift.Int : NEChatUIKit.NEBaseUserSettingCell.Type]
  @objc @_Concurrency.MainActor(unsafe) public init(userId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func headerView() -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) open func filterStackViewController() -> [UIKit.UIViewController]?
  @objc @_Concurrency.MainActor(unsafe) open func showUserInfo()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEChatBaseCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func uploadProgress(byRight: Swift.Bool, _ progress: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) open func setModel(_ model: NEChatUIKit.MessageContentModel)
  @objc deinit
}
@objc public protocol NEMoreViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func moreViewDidSelectMoreCell(moreView: NEChatUIKit.NEChatMoreActionView, cell: NEChatUIKit.NEInputMoreCell)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEChatMoreActionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var moreFlowLayout: UIKit.UICollectionViewFlowLayout?
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.NEMoreViewDelegate?
  @objc deinit
}
extension NEChatUIKit.NEChatMoreActionView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @objcMembers public class NEChatUIKitClient : ObjectiveC.NSObject {
  @objc public static let instance: NEChatUIKit.NEChatUIKitClient
  @objc public var moreAction: [NEChatUIKit.NEMoreItemModel]
  @objc public func getMoreActionData(sessionType: NIMSessionType) -> [NEChatUIKit.NEMoreItemModel]
  @objc public func regsiterCustomCell(_ registerDic: [Swift.String : UIKit.UITableViewCell.Type])
  @objc public func getRegisterCustomCell() -> [Swift.String : UIKit.UITableViewCell.Type]
  @objc deinit
}
@objc public protocol NECustomAttachmentProtocol : ObjectiveC.NSObjectProtocol {
  @objc var customType: Swift.Int { get set }
  @objc var cellHeight: CoreFoundation.CGFloat { get set }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEDetailMapController : NEChatUIKit.ChatBaseViewController, NEChatUIKit.NEMapGuideBottomViewDelegate {
  @_Concurrency.MainActor(unsafe) public var mapType: NEChatKit.NEMapType?
  @objc @_Concurrency.MainActor(unsafe) public var currentPoint: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) public var locationTitle: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var subTitle: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var currentModel: NEChatKit.ChatLocaitonModel?
  @objc @_Concurrency.MainActor(unsafe) public init(type: NEChatKit.NEMapType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func didClickGuide()
  @objc @_Concurrency.MainActor(unsafe) public func loadModels(models: [NEChatKit.ChatLocaitonModel])
  @objc @_Concurrency.MainActor(unsafe) public func refreshCurrentCache()
  @objc deinit
}
extension NEChatUIKit.NEDetailMapController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers public class NEEmotionAttachment : UIKit.NSTextAttachment {
  public var emotion: NEChatUIKit.NIMInputEmoticon? {
    get
    set
  }
  @available(iOS 7.0, *)
  @objc override dynamic public init(data contentData: Foundation.Data?, ofType uti: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NEEmotionTool : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEInputMoreCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var cellData: NEChatUIKit.NEMoreItemModel?
  @objc @_Concurrency.MainActor(unsafe) public static func getSize() -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NEKitChatConfig : ObjectiveC.NSObject {
  @objc public static let shared: NEChatUIKit.NEKitChatConfig
  @objc public var maxReadingNum: Swift.Int
  @objc public var ui: NEChatUIKit.ChatUIConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEMapAddressCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var locationImg: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectImg: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var title: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitle: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public protocol NEMapGuideBottomViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didClickGuide()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NEMapGuideBottomView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.NEMapGuideBottomViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum NEMoreActionType : Swift.Int {
  case takePicture
  case location
  case rtc
  case game
  case file
  case remind
  case photo
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @objcMembers public class NEMoreItemModel : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var title: Swift.String?
  public var type: NEChatUIKit.NEMoreActionType?
  @objc weak public var customDelegate: Swift.AnyObject?
  @objc public var action: ObjectiveC.Selector?
  @objc public var customImage: UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
public protocol NIMInputEmoticonButtonDelegate : ObjectiveC.NSObjectProtocol {
  func selectedEmoticon(emotion: NEChatUIKit.NIMInputEmoticon, catalogID: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NIMInputEmoticonButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var emotionData: NEChatUIKit.NIMInputEmoticon?
  @_Concurrency.MainActor(unsafe) public var catalogID: Swift.String?
  @_Concurrency.MainActor(unsafe) weak public var delegate: NEChatUIKit.NIMInputEmoticonButtonDelegate?
  @_Concurrency.MainActor(unsafe) public class func iconButtonWithData(data: NEChatUIKit.NIMInputEmoticon, catalogID: Swift.String, delegate: NEChatUIKit.NIMInputEmoticonButtonDelegate) -> NEChatUIKit.NIMInputEmoticonButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let NIMKit_EmojiCatalog: Swift.String
public let NIMKit_EmojiPath: Swift.String
public let NIMKit_ChartletChartletCatalogPath: Swift.String
public let NIMKit_ChartletChartletCatalogContentPath: Swift.String
public let NIMKit_ChartletChartletCatalogIconPath: Swift.String
public let NIMKit_ChartletChartletCatalogIconsSuffixNormal: Swift.String
public let NIMKit_ChartletChartletCatalogIconsSuffixHighLight: Swift.String
public let NIMKit_EmojiLeftMargin: Swift.Int
public let NIMKit_EmojiRightMargin: Swift.Int
public let NIMKit_EmojiTopMargin: Swift.Int
public let NIMKit_DeleteIconWidth: Swift.Double
public let NIMKit_DeleteIconHeight: Swift.Double
public let NIMKit_EmojCellHeight: Swift.Double
public let NIMKit_EmojImageHeight: Swift.Double
public let NIMKit_EmojImageWidth: Swift.Double
public let NIMKit_EmojRows: Swift.Int
public let NIMKit_PicCellHeight: Swift.Double
public let NIMKit_PicImageHeight: Swift.Double
public let NIMKit_PicImageWidth: Swift.Double
public let NIMKit_PicRows: Swift.Int
public enum NIMEmoticonType : ObjectiveC.NSInteger {
  case file
  case unicode
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NIMInputEmoticon : ObjectiveC.NSObject {
  public var type: NEChatUIKit.NIMEmoticonType {
    get
  }
  public var emoticonID: Swift.String?
  public var tag: Swift.String?
  public var fileName: Swift.String?
  public var unicode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NIMInputEmoticonLayout : ObjectiveC.NSObject {
  public var rows: Swift.Int
  public var columes: Swift.Int
  public var itemCountInPage: Swift.Int
  public var cellWidth: CoreFoundation.CGFloat
  public var cellHeight: CoreFoundation.CGFloat
  public var imageWidth: CoreFoundation.CGFloat
  public var imageHeight: CoreFoundation.CGFloat
  public var emoji: Swift.Bool?
  public init(width: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NIMInputEmoticonCatalog : ObjectiveC.NSObject {
  public var layout: NEChatUIKit.NIMInputEmoticonLayout?
  public var catalogID: Swift.String?
  public var title: Swift.String?
  public var id2Emoticons: [Swift.String : NEChatUIKit.NIMInputEmoticon]?
  public var tag2Emoticons: [Swift.String : NEChatUIKit.NIMInputEmoticon]?
  public var emoticons: [NEChatUIKit.NIMInputEmoticon]?
  public var icon: Swift.String?
  public var iconPressed: Swift.String?
  public var pagesCount: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NIMInputEmoticonManager : ObjectiveC.NSObject {
  public static let shared: NEChatUIKit.NIMInputEmoticonManager
  @objc override dynamic public init()
  public func emoticonCatalog(catalogID: Swift.String) -> NEChatUIKit.NIMInputEmoticonCatalog?
  public func emoticonByTag(tag: Swift.String) -> NEChatUIKit.NIMInputEmoticon?
  public func emoticonByID(emoticonID: Swift.String) -> NEChatUIKit.NIMInputEmoticon?
  public func emoticonByCatalogID(catalogID: Swift.String, emoticonID: Swift.String) -> NEChatUIKit.NIMInputEmoticon?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NormalChatMessageBaseCell : NEChatUIKit.NEBaseChatMessageCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NEChatUIKit.ChatRouter {
  @objc public static func register()
}
extension UIKit.UIColor {
  public static let normalChatInputBg: UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NormalChatViewController : NEChatUIKit.ChatViewController {
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getMenuView() -> NEChatUIKit.NEBaseChatInputView
  @_Concurrency.MainActor(unsafe) @objc override open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @_Concurrency.MainActor(unsafe) @objc override open func toSetting()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didTapReadView(_ cell: UIKit.UITableViewCell, _ model: NEChatUIKit.MessageContentModel?)
  @_Concurrency.MainActor(unsafe) @objc public func getMessageModel(model: NEChatUIKit.MessageModel)
  @objc deinit
}
public enum TeamType {
  case advanceTeam
  case discussTeam
  public static func == (a: NEChatUIKit.TeamType, b: NEChatUIKit.TeamType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NotificationMessageUtils : ObjectiveC.NSObject {
  public class func textForNotification(message: NIMMessage) -> Swift.String
  public class func isDiscussSeniorTeamNoti(message: NIMMessage) -> Swift.Bool
  public class func isDiscussSeniorTeamUpdateCustomNoti(message: NIMMessage) -> Swift.Bool
  public class func isTeamLeaveOrDismiss(message: NIMMessage) -> (isLeave: Swift.Bool, isDismiss: Swift.Bool)
  public class func textForTeamNotificationMessage(message: NIMMessage) -> Swift.String
  public class func getShowName(userId: Swift.String, nimSession: NIMSession?) -> Swift.String
  public class func fromName(message: NIMMessage) -> Swift.String
  public class func toName(message: NIMMessage) -> [Swift.String]
  public class func teamName(message: NIMMessage) -> Swift.String
  public class func teamType(message: NIMMessage) -> NEChatUIKit.TeamType
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Bundle {
  public class func nim_defaultEmojiBundle() -> Foundation.Bundle?
  public class func nim_EmojiPlistFile() -> Swift.String?
  public class func nim_EmojiImage(imageName: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class OperationCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var label: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var model: NEChatUIKit.OperationItem? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum OperationType : Swift.Int {
  case copy = 1
  case reply
  case forward
  case pin
  case removePin
  case multiSelect
  case collection
  case delete
  case recall
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class OperationItem : ObjectiveC.NSObject {
  @objc public var text: Swift.String
  @objc public var imageName: Swift.String
  public var type: NEChatUIKit.OperationType?
  @objc public static func copyItem() -> NEChatUIKit.OperationItem
  @objc public static func replayItem() -> NEChatUIKit.OperationItem
  @objc public static func forwardItem() -> NEChatUIKit.OperationItem
  @objc public static func pinItem() -> NEChatUIKit.OperationItem
  @objc public static func removePinItem() -> NEChatUIKit.OperationItem
  @objc public static func deleteItem() -> NEChatUIKit.OperationItem
  @objc public static func recallItem() -> NEChatUIKit.OperationItem
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class P2PChatViewController : NEChatUIKit.NormalChatViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(session: NIMSession, anchor: NIMMessage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getSessionInfo(session: NIMSession)
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageAudioCell : NEChatUIKit.NEBasePinMessageAudioCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageDefaultCell : NEChatUIKit.NEBasePinMessageTextCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageFileCell : NEChatUIKit.NEBasePinMessageFileCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageImageCell : NEChatUIKit.NEBasePinMessageImageCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageLocationCell : NEChatUIKit.NEBasePinMessageLocationCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PinMessageModel : ObjectiveC.NSObject {
  public func getMessageType() -> Swift.Int
  public func cellHeight() -> CoreFoundation.CGFloat
  public func getReplyMessageWithoutThread(message: NIMMessage) -> NEChatUIKit.MessageModel?
  public func getUserInfo(userId: Swift.String) -> NECoreIMKit.User?
  public func getTeamMember(userId: Swift.String, teamId: Swift.String) -> NIMTeamMember?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageTextCell : NEChatUIKit.NEBasePinMessageTextCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageVideoCell : NEChatUIKit.NEBasePinMessageVideoCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PinMessageViewController : NEChatUIKit.NEBasePinMessageViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func getRegisterCellDic() -> [Swift.Int : NEChatUIKit.NEBasePinMessageCell.Type]
  @_Concurrency.MainActor(unsafe) @objc override open func getForwardAlertController() -> NEChatUIKit.NEBaseForwardAlertViewController
  @_Concurrency.MainActor(unsafe) @objc override public init(session: NIMSession)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol PinMessageViewModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didNeedRefreshUI()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PinMessageViewModel : ObjectiveC.NSObject, NECoreIMKit.ChatExtendProviderDelegate, NIMChatManagerDelegate, NIMConversationManagerDelegate {
  @objc final public let chatRepo: NEChatKit.ChatRepo
  @objc public var items: [NEChatUIKit.PinMessageModel]
  @objc public var delegate: NEChatUIKit.PinMessageViewModelDelegate?
  @objc public var session: NIMSession?
  @objc override dynamic public init()
  @objc public func onRecvMessagesDeleted(_ messages: [NIMMessage], exts: [Swift.String : Swift.String]?)
  @objc public func getPinitems(session: NIMSession, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func removePinMessage(_ message: NIMMessage, _ completion: @escaping (Swift.Error?, NIMMessagePinItem?) -> Swift.Void)
  @objc public func forwardUserMessage(_ message: NIMMessage, _ users: [NIMUser])
  @objc public func forwardTeamMessage(_ message: NIMMessage, _ team: NIMTeam)
  @objc public func onRecvRevokeMessageNotification(_ notification: NIMRevokeMessageNotification)
  @objc public func onNotifyAddMessagePin(pinItem: NIMMessagePinItem)
  @objc public func onNotifyRemoveMessagePin(pinItem: NIMMessagePinItem)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ReadViewController : NEChatUIKit.NEBaseReadViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override public func commonUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ReplyMessageUtil : ObjectiveC.NSObject {
  public static func textForReplyModel(model: NEChatUIKit.MessageContentModel) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ReplyView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SelectUserViewController : NEChatUIKit.NEBaseSelectUserViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@objc public protocol TeamChatViewModelDelegate : NEChatUIKit.ChatViewModelDelegate {
  @objc func onTeamRemoved(team: NIMTeam)
  @objc func onTeamUpdate(team: NIMTeam)
  @objc func onTeamMemberUpdate(team: NIMTeam)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TeamChatViewModel : NEChatUIKit.ChatViewModel, NIMTeamManagerDelegate {
  @objc public func getTeam(teamId: Swift.String) -> NIMTeam?
  @objc public func fetchTeamInfo(teamId: Swift.String, _ completion: @escaping (Foundation.NSError?, NIMTeam?) -> Swift.Void)
  @objc public func onTeamRemoved(_ team: NIMTeam)
  @objc public func onTeamUpdated(_ team: NIMTeam)
  @objc public func onTeamMemberUpdated(_ team: NIMTeam, withMembers memberIDs: [Swift.String]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TeamMemberSelectVM : ObjectiveC.NSObject {
  @objc public var chatRepo: NEChatKit.ChatRepo
  @objc public func fetchTeamMembers(sessionId: Swift.String, _ completion: @escaping (Swift.Error?, NEChatKit.ChatTeamInfoModel?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TextViewController : NEChatUIKit.ChatBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func viewTap()
  @objc @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class UserBaseTableViewCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var avatarImage: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userModel: NECoreIMKit.User?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func baseCommonUI()
  @objc @_Concurrency.MainActor(unsafe) open func setModel(_ model: NECoreIMKit.User)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UserSettingCellModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class UserSettingSelectCell : NEChatUIKit.NEBaseUserSettingSelectCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class UserSettingSwitchCell : NEChatUIKit.NEBaseUserSettingSwitchCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class UserSettingViewController : NEChatUIKit.NEBaseUserSettingViewController {
  @_Concurrency.MainActor(unsafe) @objc override public init(userId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UserSettingViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class UserTableViewCell : NEChatUIKit.UserBaseTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override open func baseCommonUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NEChatUIKit.ChatSendMessageStatus : Swift.Equatable {}
extension NEChatUIKit.ChatSendMessageStatus : Swift.Hashable {}
extension NEChatUIKit.ChatSendMessageStatus : Swift.RawRepresentable {}
extension NEChatUIKit.RightStyle : Swift.Equatable {}
extension NEChatUIKit.RightStyle : Swift.Hashable {}
extension NEChatUIKit.RightStyle : Swift.RawRepresentable {}
extension NEChatUIKit.NEChatAvatarType : Swift.Equatable {}
extension NEChatUIKit.NEChatAvatarType : Swift.Hashable {}
extension NEChatUIKit.NEChatAvatarType : Swift.RawRepresentable {}
extension NEChatUIKit.LoadMessageDirection : Swift.Equatable {}
extension NEChatUIKit.LoadMessageDirection : Swift.Hashable {}
extension NEChatUIKit.LoadMessageDirection : Swift.RawRepresentable {}
extension NEChatUIKit.MessageType : Swift.Equatable {}
extension NEChatUIKit.MessageType : Swift.Hashable {}
extension NEChatUIKit.MessageType : Swift.RawRepresentable {}
extension NEChatUIKit.ChatMenuType : Swift.Equatable {}
extension NEChatUIKit.ChatMenuType : Swift.Hashable {}
extension NEChatUIKit.ChatMenuType : Swift.RawRepresentable {}
extension NEChatUIKit.NEMoreActionType : Swift.Equatable {}
extension NEChatUIKit.NEMoreActionType : Swift.Hashable {}
extension NEChatUIKit.NEMoreActionType : Swift.RawRepresentable {}
extension NEChatUIKit.NIMEmoticonType : Swift.Equatable {}
extension NEChatUIKit.NIMEmoticonType : Swift.Hashable {}
extension NEChatUIKit.NIMEmoticonType : Swift.RawRepresentable {}
extension NEChatUIKit.TeamType : Swift.Equatable {}
extension NEChatUIKit.TeamType : Swift.Hashable {}
extension NEChatUIKit.OperationType : Swift.Equatable {}
extension NEChatUIKit.OperationType : Swift.Hashable {}
extension NEChatUIKit.OperationType : Swift.RawRepresentable {}
