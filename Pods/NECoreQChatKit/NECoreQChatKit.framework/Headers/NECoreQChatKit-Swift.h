
#if defined(__arm64__) && __arm64__ || (__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef NECOREQCHATKIT_SWIFT_H
#define NECOREQCHATKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import NIMSDK;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NECoreQChatKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSNumber;

SWIFT_CLASS("_TtC14NECoreQChatKit15NEAnnounceModel")
@interface NEAnnounceModel : NSObject
@property (nonatomic, strong) NSNumber * _Nullable channelId;
@property (nonatomic, strong) NSNumber * _Nullable roleId;
@property (nonatomic) NSInteger emojiReplay;
- (BOOL)isInValid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NIMQChatUserPushNotificationConfig;

SWIFT_CLASS("_TtC14NECoreQChatKit17QChatApnsProvider")
@interface QChatApnsProvider : NSObject <NIMQChatApnsManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatApnsProvider * _Nonnull shared;)
+ (QChatApnsProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)getUserPushNotificationConfigByServerWithServer:(NSArray<NSNumber *> * _Nonnull)server :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMQChatUserPushNotificationConfig *> * _Nullable))completion;
- (void)updatePushNotificationByProfileWithProfile:(NIMPushNotificationProfile)profile server:(uint64_t)server :(void (^ _Nonnull)(NSError * _Nullable))completion;
@end

@class NIMQChatSubscribeChannelAsVisitorParam;
@class NIMQChatSubscribeChannelAsVisitorResult;

SWIFT_CLASS("_TtC14NECoreQChatKit20QChatChannelProvider")
@interface QChatChannelProvider : NSObject <NIMQChatChannelManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatChannelProvider * _Nonnull shared;)
+ (QChatChannelProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 游客模式订阅主题
- (void)subscribeChannel:(NIMQChatSubscribeChannelAsVisitorParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NIMQChatSubscribeChannelAsVisitorResult * _Nullable))completion;
@end


SWIFT_CLASS("_TtC14NECoreQChatKit14QChatKitClient")
@interface QChatKitClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC14NECoreQChatKit15QChatLoginParam")
@interface QChatLoginParam : NSObject
@property (nonatomic, copy) NSString * _Nullable account;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable dynamicTokenHandler)(NSString * _Nonnull);
@property (nonatomic, copy) NSString * _Nullable loginExt;
- (nonnull instancetype)init:(NSString * _Nonnull)account :(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14NECoreQChatKit16QChatLoginResult")
@interface QChatLoginResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NIMQChatGetLastMessageOfChannelsParam;
@class NIMQChatMessage;
@class NIMQChatRevokeMessageParam;
@class NIMQChatDeleteMessageParam;

SWIFT_CLASS("_TtC14NECoreQChatKit20QChatMessageProvider")
@interface QChatMessageProvider : NSObject <NIMEventSubscribeManagerDelegate, NIMQChatManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatMessageProvider * _Nonnull shared;)
+ (QChatMessageProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取channel最后一条消息
- (void)getLastMessageWithParam:(NIMQChatGetLastMessageOfChannelsParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NSDictionary<NSNumber *, NIMQChatMessage *> * _Nullable))completion;
/// 撤回圈组消息
- (void)revokeMessageWithParam:(NIMQChatRevokeMessageParam * _Nonnull)param completion:(NIMQChatUpdateMessageHandler _Nullable)completion;
- (void)deleteMessageWithParam:(NIMQChatDeleteMessageParam * _Nonnull)param completion:(NIMQChatUpdateMessageHandler _Nullable)completion;
/// 发送快捷评论
- (void)addQuickCommentWithType:(int64_t)type to:(NIMQChatMessage * _Nonnull)message completion:(NIMQChatHandler _Nullable)completion;
- (void)deleteQuickCommentWithType:(int64_t)type to:(NIMQChatMessage * _Nonnull)message completion:(NIMQChatHandler _Nullable)completion;
- (void)fetchQuickCommentsWithMessages:(NSArray<NIMQChatMessage *> * _Nonnull)messages completion:(NIMQChatFetchQuickCommentsByMsgsHandler _Nonnull)completion;
@end

@class NIMQChatUnreadInfoChangedEvent;
@class NIMQChatServerUnreadInfo;

@interface QChatMessageProvider (SWIFT_EXTENSION(NECoreQChatKit)) <NIMQChatMessageManagerDelegate>
- (void)onRecvMessages:(NSArray<NIMQChatMessage *> * _Nonnull)messages;
- (void)unreadInfoChanged:(NIMQChatUnreadInfoChangedEvent * _Nonnull)event;
- (void)serverUnreadInfoChanged:(NSDictionary<NSNumber *, NIMQChatServerUnreadInfo *> * _Nonnull)serverUnreadInfoDic;
@end

@class NIMQChatRemoveServerRoleMemberParam;
@class NIMQChatRemoveServerRoleMembersResult;
@class NIMQChatCheckPermissionParam;
@class NSError;

SWIFT_CLASS("_TtC14NECoreQChatKit17QChatRoleProvider")
@interface QChatRoleProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatRoleProvider * _Nonnull shared;)
+ (QChatRoleProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 将某些人移除某服务器身份组
- (void)removeServerRoleMemberWithParam:(NIMQChatRemoveServerRoleMemberParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NIMQChatRemoveServerRoleMembersResult * _Nullable))completion;
/// 查询自己是否有某个权限
- (void)checkPermissionWithParam:(NIMQChatCheckPermissionParam * _Nonnull)param complete:(void (^ _Nonnull)(NSError * _Nullable, BOOL))complete;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NIMQChatServer;

SWIFT_CLASS("_TtC14NECoreQChatKit11QChatServer")
@interface QChatServer : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, copy) NSString * _Nullable custom;
@property (nonatomic, copy) NSString * _Nullable owner;
@property (nonatomic) BOOL hasUnread;
/// 初始化时无值，需要外部根据未读数变更回调赋值
@property (nonatomic) NSUInteger unreadCount;
/// 是否是游客模式，默认非游客模式，外部根据业务层数据处理
@property (nonatomic) BOOL isVisitorMode;
@property (nonatomic, copy) NSString * _Nullable topic;
@property (nonatomic, strong) NEAnnounceModel * _Nullable announce;
- (nonnull instancetype)initWithServer:(NIMQChatServer * _Nullable)server OBJC_DESIGNATED_INITIALIZER;
- (void)copyFromModelWithServer:(QChatServer * _Nullable)server;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NIMQChatGetServerMembersParam;
@class NIMQChatServerMember;
@class NIMQChatEnterServerAsVisitorParam;
@class NIMQChatEnterServerAsVisitorResult;
@class NIMQChatLeaveServerAsVisitorParam;
@class NIMQChatLeaveServerAsVisitorResult;
@class NIMQChatSubscribeServerAsVisitorParam;
@class NIMQChatSubscribeServerAsVisitorResult;

SWIFT_CLASS("_TtC14NECoreQChatKit19QChatServerProvider")
@interface QChatServerProvider : NSObject <NIMQChatServerManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatServerProvider * _Nonnull shared;)
+ (QChatServerProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 删除社区
- (void)deleteServer:(uint64_t)serverid :(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 分页查询社区成员信息
- (void)getServerMembersWithParam:(NIMQChatGetServerMembersParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMQChatServerMember *> * _Nullable))completion;
/// 游客模式加入
- (void)enterAsVisitor:(NIMQChatEnterServerAsVisitorParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NIMQChatEnterServerAsVisitorResult * _Nullable))completion;
/// 退出游客模式
- (void)leaveAsVisitor:(NIMQChatLeaveServerAsVisitorParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NIMQChatLeaveServerAsVisitorResult * _Nullable))completion;
/// 游客模式订阅社区
- (void)subscribeAsVisitor:(NIMQChatSubscribeServerAsVisitorParam * _Nonnull)param :(void (^ _Nonnull)(NSError * _Nullable, NIMQChatSubscribeServerAsVisitorResult * _Nullable))completion;
@end

@class NIMSession;
@class NIMQChatGetMessageCacheParam;

SWIFT_CLASS("_TtC14NECoreQChatKit26QChatSystemMessageProvider")
@interface QChatSystemMessageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QChatSystemMessageProvider * _Nonnull shared;)
+ (QChatSystemMessageProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)sendMessageWithMessage:(NIMQChatMessage * _Nonnull)message session:(NIMSession * _Nonnull)session :(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)getLocalMessageWithParam:(NIMQChatGetMessageCacheParam * _Nonnull)param completion:(void (^ _Nonnull)(NSError * _Nullable, NSArray<NIMQChatMessage *> * _Nullable))completion;
- (void)addDelegateWithDelegate:(id <NIMQChatMessageManagerDelegate> _Nonnull)delegate;
- (void)removeDelegateWithDelegate:(id <NIMQChatMessageManagerDelegate> _Nonnull)delegate;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
