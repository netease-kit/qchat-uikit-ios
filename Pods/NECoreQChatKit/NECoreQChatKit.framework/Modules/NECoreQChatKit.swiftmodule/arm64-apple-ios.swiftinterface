// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NECoreQChatKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreMedia
import CoreVideo
import Foundation
import NECommonKit
import NECoreIMKit
import NECoreKit
@_exported import NECoreQChatKit
import NIMSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct AddChannelRoleParam {
  public var serverId: Swift.UInt64
  public var channelId: Swift.UInt64
  public var parentRoleId: Swift.UInt64
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64, parentRoleId: Swift.UInt64)
}
public struct AddMemberRoleParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var accid: Swift.String?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, accid: Swift.String?)
  public func toIMParam() -> NIMQChatAddMemberRoleParam
}
public struct BlackWhiteMembersResult {
  public var memberArray: [NECoreQChatKit.ServerMemeber]
}
public struct ChannelMembersParam {
  public var serverId: Swift.UInt64
  public var channelId: Swift.UInt64
  public var timeTag: Foundation.TimeInterval?
  public var limit: Swift.Int
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64)
  public func toIMParam() -> NIMQChatGetChannelMembersByPageParam
}
public struct ChannelMembersResult {
  public var memberArray: [NECoreQChatKit.ServerMemeber]?
  public var hasMore: Swift.Bool?
  public var nextTimetag: Foundation.TimeInterval?
}
public enum channelRoleType {
  case everyone
  case custom
  public static func == (a: NECoreQChatKit.channelRoleType, b: NECoreQChatKit.channelRoleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChannelRole {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var parentRoleId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var name: Swift.String?
  public var type: NECoreQChatKit.channelRoleType?
  public var icon: Swift.String?
  public var ext: Swift.String?
  public var auths: [NECoreQChatKit.RoleStatusInfo]?
  public var createTime: Foundation.TimeInterval?
  public var updateTime: Foundation.TimeInterval?
  public init()
}
public struct ChannelRoleParam {
  public var serverId: Swift.UInt64
  public var channelId: Swift.UInt64
  public var timeTag: Foundation.TimeInterval?
  public var limit: Swift.Int
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64)
  public func toIMParam() -> NIMQChatGetChannelRolesParam
}
public struct ChatChannel {
  public var channelId: Swift.UInt64?
  public var serverId: Swift.UInt64?
  public var appId: Swift.Int?
  public var name: Swift.String?
  public var topic: Swift.String?
  public var visibleType: NECoreQChatKit.ChannelVisibleType?
  public var custom: Swift.String?
  public var type: NECoreQChatKit.ChannelType?
  public var validflag: Swift.Bool?
  public var createTime: Foundation.TimeInterval?
  public var updateTime: Foundation.TimeInterval?
  public init()
}
public enum ChannelType : Swift.Int {
  case messageType, customType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChannelVisibleType {
  case isPublic
  case isPrivate
  public static func == (a: NECoreQChatKit.ChannelVisibleType, b: NECoreQChatKit.ChannelVisibleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CreateChannelParam {
  public var serverId: Swift.UInt64
  public var name: Swift.String
  public var topic: Swift.String?
  public var custom: Swift.String?
  public var visibleType: NECoreQChatKit.ChannelVisibleType
  public var type: NECoreQChatKit.ChannelType
  public init(serverId: Swift.UInt64, name: Swift.String, topic: Swift.String?, visibleType: NECoreQChatKit.ChannelVisibleType)
}
public enum QChatServerInviteMode {
  case needApprove
  case autoEnter
  public static func == (a: NECoreQChatKit.QChatServerInviteMode, b: NECoreQChatKit.QChatServerInviteMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum QChatServerApplyMode {
  case autoEnter
  case needApprove
  public static func == (a: NECoreQChatKit.QChatServerApplyMode, b: NECoreQChatKit.QChatServerApplyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CreateServerParam {
  public var name: Swift.String?
  public var icon: Swift.String?
  public var custom: Swift.String?
  public var inviteMode: NECoreQChatKit.QChatServerInviteMode
  public var applyMode: NECoreQChatKit.QChatServerApplyMode?
  public init(name: Swift.String, icon: Swift.String)
  public func toIMParam() -> NIMQChatCreateServerParam
  public func toIMUpdateParam() -> NIMQChatUpdateServerParam
}
public struct CreateServerResult {
  public var server: NECoreQChatKit.QChatServer?
}
public enum ChannelMemberRoleType {
  case white
  case black
  public static func == (a: NECoreQChatKit.ChannelMemberRoleType, b: NECoreQChatKit.ChannelMemberRoleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GetChannelBlackWhiteMembers {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var timeTag: Foundation.TimeInterval?
  public var limit: Swift.Int?
  public var type: NECoreQChatKit.ChannelMemberRoleType?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, timeTag: Foundation.TimeInterval?, limit: Swift.Int?, type: NECoreQChatKit.ChannelMemberRoleType?)
  public func toIMParam() -> NIMQChatGetChannelBlackWhiteMembersByPageParam
}
public struct ChannelIdInfo {
  public var channelId: Swift.UInt64?
  public var serverId: Swift.UInt64?
  public init()
}
public struct GetChannelUnreadInfosParam {
  public var targets: [NECoreQChatKit.ChannelIdInfo]?
  public init()
}
public struct GetExistingChannelBlackWhiteMembersParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var type: NECoreQChatKit.ChannelMemberRoleType?
  public var accIds: [Swift.String]?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, type: NECoreQChatKit.ChannelMemberRoleType?, accIds: [Swift.String]?)
}
public struct GetExistingChannelRolesByServerRoleIdsParam {
  public var serverId: Swift.UInt64
  public var channelId: Swift.UInt64
  public var roleIds: [Swift.UInt64]
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64, roleIds: [Swift.UInt64])
  public func toIMParam() -> NIMQChatGetExistingChannelRolesByServerRoleIdsParam
}
public struct GetExistingAccidsOfMemberRolesParam {
  public var serverId: Swift.UInt64
  public var channelId: Swift.UInt64
  public var accids: [Swift.String]
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64, accids: [Swift.String])
}
public struct GetMessageHistoryParam {
  public var limit: Swift.Int
  public var lastMsg: NIMQChatMessage?
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64)
}
public struct GetServerRolesByAccIdParam {
  public var serverId: Swift.UInt64?
  public var accid: Swift.String?
  public var timeTag: Foundation.TimeInterval?
  public var limit: Swift.Int?
  public init(serverId: Swift.UInt64?, accid: Swift.String?, timeTag: Foundation.TimeInterval? = 0, limit: Swift.Int? = 50)
  public func toIMParam() -> NIMQChatGetServerRolesByAccidParam
}
public struct GetServersByPageParam {
  public var timeTag: Foundation.TimeInterval?
  public var limit: Swift.Int?
  public init(timeTag: Foundation.TimeInterval, limit: Swift.Int)
}
public struct GetServersByPageResult {
  public var servers: [NECoreQChatKit.QChatServer]
  public init()
}
public struct MarkMessageReadParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var ackTimestamp: Foundation.TimeInterval?
  public init(serverId: Swift.UInt64, channelId: Swift.UInt64)
  public func toImParam() -> NIMQChatMarkMessageReadParam
}
public struct RemoveServerRoleMemberParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var accountArray: [Swift.String]?
  public init()
}
public struct UpdateMyMemberInfoParam {
  public var serverId: Swift.UInt64?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public var custom: Swift.String?
  public init()
}
public struct KickServerMembersParam {
  public var serverId: Swift.UInt64?
  public var accounts: [Swift.String]?
  public init()
}
public struct MemberRole {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var accid: Swift.String?
  public var channelId: Swift.UInt64?
  public var auths: [NECoreQChatKit.RoleStatusInfo]?
  public var createTime: Swift.Double?
  public var updateTime: Swift.Double?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public var custom: Swift.String?
  public var type: NECoreQChatKit.ServerMemberType?
  public var joinTime: Swift.Double?
  public var inviter: Swift.String?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NEAnnounceModel : ObjectiveC.NSObject {
  @objc public var channelId: Foundation.NSNumber?
  @objc public var roleId: Foundation.NSNumber?
  @objc public var emojiReplay: Swift.Int
  @objc public func isInValid() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatApnsProvider : ObjectiveC.NSObject, NIMQChatApnsManagerDelegate {
  @objc public static let shared: NECoreQChatKit.QChatApnsProvider
  @objc deinit
  @objc public func getUserPushNotificationConfigByServer(server: [Foundation.NSNumber], _ completion: @escaping (Swift.Error?, [NIMQChatUserPushNotificationConfig]?) -> Swift.Void)
  @objc public func updatePushNotificationByProfile(profile: NIMPushNotificationProfile, server: Swift.UInt64, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
public struct QChatApplyServerJoinParam {
  public var serverId: Swift.UInt64
  public var postscript: Swift.String?
  public init(serverId: Swift.UInt64)
}
public protocol QChatChannelProviderDelegate : ObjectiveC.NSObjectProtocol {
  func callBack()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatChannelProvider : ObjectiveC.NSObject, NIMQChatChannelManagerDelegate {
  @objc public static let shared: NECoreQChatKit.QChatChannelProvider
  public func createChannel(param: NECoreQChatKit.CreateChannelParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChatChannel?) -> Swift.Void)
  public func updateChannelInfo(param: NECoreQChatKit.UpdateChannelParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChatChannel?) -> Swift.Void)
  public func deleteChannel(channelId: Swift.UInt64?, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getChannelMembers(param: NECoreQChatKit.ChannelMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelMembersResult?) -> Swift.Void)
  public func getBlackWhiteMembersByPage(param: NECoreQChatKit.GetChannelBlackWhiteMembers, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelMembersResult?) -> Swift.Void)
  public func updateBlackWhiteMembers(param: NECoreQChatKit.UpdateChannelBlackWhiteMembersParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getExistingChannelBlackWhiteMembers(param: NECoreQChatKit.GetExistingChannelBlackWhiteMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.BlackWhiteMembersResult?) -> Swift.Void)
  public func getChannelsByPage(param: NECoreQChatKit.QChatGetChannelsByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetChannelsByPageResult?) -> Swift.Void)
  @objc public func subscribeChannel(_ param: NIMQChatSubscribeChannelAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatSubscribeChannelAsVisitorResult?) -> Swift.Void)
  public func getChannelUnReadInfo(_ param: NECoreQChatKit.GetChannelUnreadInfosParam, _ completion: @escaping (Swift.Error?, [NIMQChatUnreadInfo]?) -> Swift.Void)
  @objc deinit
}
public struct QChatGetChannelsByPageParam {
  public var serverId: Swift.UInt64?
  public var timeTag: Swift.Double
  public var limit: Swift.Int
  public init(timeTag: Foundation.TimeInterval, serverId: Swift.UInt64)
  public func toIMParam() -> NIMQChatGetChannelsByPageParam
}
public struct QChatGetChannelsByPageResult {
  public var channels: [NECoreQChatKit.ChatChannel]
  public var hasMore: Swift.Bool
  public var nextTimetag: Swift.Double
  public init(channelsResult: NIMQChatGetChannelsByPageResult?)
}
public struct QChatGetExistingAccidsInServerRoleParam {
  public var serverId: Swift.UInt64
  public var accids: [Swift.String]?
  public init(serverId: Swift.UInt64, accids: [Swift.String])
}
public struct QChatGetServerMembersByPageParam {
  public var serverId: Swift.UInt64?
  public var timeTag: Swift.Double
  public var limit: Swift.Int
  public init(timeTag: Foundation.TimeInterval, serverId: Swift.UInt64)
}
public struct QChatGetServerMembersParam {
  public var serverAccIds: [NECoreQChatKit.QChatGetServerMemberItem]?
  public init(serverAccIds: [NECoreQChatKit.QChatGetServerMemberItem]?)
  public func toIMParam() -> NIMQChatGetServerMembersParam
}
public struct QChatGetServerMemberItem {
  public var serverId: Swift.UInt64?
  public var accid: Swift.String?
  public init(serverId: Swift.UInt64, accid: Swift.String)
}
public struct QChatGetServerMembersResult {
  public var memberArray: [NECoreQChatKit.ServerMemeber]
  public var hasMore: Swift.Bool?
  public var nextTimetag: Foundation.TimeInterval?
}
public struct QChatGetServersParam {
  public var serverIds: [Foundation.NSNumber]?
  public init(serverIds: [Foundation.NSNumber])
}
public struct QChatGetServersResult {
  public var servers: [NECoreQChatKit.QChatServer]
}
public struct QChatInviteServerMembersParam {
  public var serverId: Swift.UInt64?
  public var accids: [Swift.String]?
  public var postscript: Swift.String?
  public init(serverId: Swift.UInt64, accids: [Swift.String])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class QChatKitClient : ObjectiveC.NSObject {
  public static let instance: NECoreQChatKit.QChatKitClient
  public func setupCoreKitQChat(_ option: NIMSDKOption)
  public var enabledMessageCache: Swift.Bool {
    get
    set
  }
  public var imServerSetting: NIMServerSetting {
    get
    set
  }
  public func sdkVersion() -> Swift.String
  public var imConfig: NIMSDKConfig {
    get
  }
  public func imAccid() -> Swift.String
  public func isLogined() -> Swift.Bool
  public func isInit() -> Swift.Bool
  public func appKey() -> Swift.String
  public func isUsingDemoAppKey() -> Swift.Bool
  public func isMySelf(_ accid: Swift.String?) -> Swift.Bool
  public func loginQChat(_ loginParam: NECoreQChatKit.QChatLoginParam, completion: @escaping (Swift.Error?, NECoreQChatKit.QChatLoginResult?) -> Swift.Void)
  public func logoutQChat(_ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func setQChatOption(option: NIMQChatOption)
  public func updateApnsToken(data: Foundation.Data, key: Swift.String?, qchatKey: Swift.String?) -> Swift.String
  public func uploadLogs(_ completion: @escaping NIMUploadLogsHandler)
  public func addDelegate(_ delegate: NECoreIMKit.IUserInfoDelegate)
  public func removeDelegate(_ delegate: NECoreIMKit.IUserInfoDelegate)
  public func getSettingRepo() -> NECoreIMKit.SettingRepo
  public func getConfigCenter() -> NECoreIMKit.ConfigCenter
  @objc deinit
}
public enum LoginAuthType : Swift.Int {
  case theDefault
  case dynamicToken
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias CallBack = (_ str: Swift.String) -> Swift.String
@objc @objcMembers public class QChatLoginParam : ObjectiveC.NSObject {
  @objc public var account: Swift.String?
  @objc public var token: Swift.String?
  public var authType: NECoreQChatKit.LoginAuthType?
  @objc public var dynamicTokenHandler: NECoreQChatKit.CallBack?
  @objc public var loginExt: Swift.String?
  @objc public init(_ account: Swift.String, _ token: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QChatLoginResult : ObjectiveC.NSObject {
  @objc deinit
}
public enum QChatServerMemberType {
  case common
  case owner
  public static func == (a: NECoreQChatKit.QChatServerMemberType, b: NECoreQChatKit.QChatServerMemberType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct QChatMember {
  public var serverId: Swift.UInt64?
  public var appId: ObjectiveC.NSInteger?
  public var accid: Swift.String?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public var inviter: Swift.String?
  public var custom: Swift.String?
  public var type: NECoreQChatKit.QChatServerMemberType?
  public var joinTime: Foundation.TimeInterval?
  public var validFlag: Swift.Bool?
  public var createTime: Foundation.TimeInterval?
  public var updateTime: Foundation.TimeInterval?
}
public protocol QChatMessageProviderDelegate : ObjectiveC.NSObjectProtocol {
  func onReceive(_ messages: [NIMQChatMessage])
  func onUnReadChange(_ unreads: [NIMQChatUnreadInfo]?, _ lastUnreads: [NIMQChatUnreadInfo]?)
  func serverUnreadInfoChanged(_ serverUnreadInfoDic: [Foundation.NSNumber : NIMQChatServerUnreadInfo])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatMessageProvider : ObjectiveC.NSObject, NIMQChatManagerDelegate, NIMEventSubscribeManagerDelegate {
  @objc public static let shared: NECoreQChatKit.QChatMessageProvider
  public func addDelegate(_ delegate: NECoreQChatKit.QChatMessageProviderDelegate)
  public func removeDelegate(_ delegate: NECoreQChatKit.QChatMessageProviderDelegate)
  @objc public func getLastMessage(param: NIMQChatGetLastMessageOfChannelsParam, _ completion: @escaping (Swift.Error?, [Foundation.NSNumber : NIMQChatMessage]?) -> Swift.Void)
  @objc public func revokeMessage(param: NIMQChatRevokeMessageParam, completion: NIMQChatUpdateMessageHandler?)
  @objc public func deleteMessage(param: NIMQChatDeleteMessageParam, completion: NIMQChatUpdateMessageHandler?)
  @objc public func addQuickComment(type: Swift.Int64, to message: NIMQChatMessage, completion: NIMQChatHandler?)
  @objc public func deleteQuickComment(type: Swift.Int64, to message: NIMQChatMessage, completion: NIMQChatHandler?)
  @objc public func fetchQuickComments(messages: [NIMQChatMessage], completion: @escaping NIMQChatFetchQuickCommentsByMsgsHandler)
  @objc deinit
}
extension NECoreQChatKit.QChatMessageProvider : NIMQChatMessageManagerDelegate {
  @objc dynamic public func onRecvMessages(_ messages: [NIMQChatMessage])
  @objc dynamic public func unreadInfoChanged(_ event: NIMQChatUnreadInfoChangedEvent)
  @objc dynamic public func serverUnreadInfoChanged(_ serverUnreadInfoDic: [Foundation.NSNumber : NIMQChatServerUnreadInfo])
}
public protocol QChatRoleProviderDelegate : ObjectiveC.NSObjectProtocol {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class QChatRoleProvider : ObjectiveC.NSObject {
  @objc public static let shared: NECoreQChatKit.QChatRoleProvider
  public func createRole(_ param: NECoreQChatKit.ServerRoleParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerRole) -> Swift.Void)
  public func getRoles(_ param: NECoreQChatKit.GetServerRoleParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerRole]?, Swift.Set<Foundation.NSNumber>?) -> Swift.Void)
  public func updateServerRolePriorities(_ param: NECoreQChatKit.UpdateServerRolePrioritiesParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func deleteRoles(_ param: NECoreQChatKit.DeleteServerRoleParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func updateRole(_ param: NECoreQChatKit.UpdateServerRoleParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerRole) -> Swift.Void)
  public func getServerRoleMembers(_ param: NECoreQChatKit.GetServerRoleMembersParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.RoleMember]) -> Swift.Void)
  public func addRoleMember(_ param: NECoreQChatKit.AddServerRoleMemberParam, _ completion: @escaping (Swift.Error?, [Swift.String], [Swift.String]) -> Swift.Void)
  public func deleateRoleMember(_ param: NECoreQChatKit.RemoveServerRoleMemberParam, _ completion: @escaping (Swift.Error?, [Swift.String], [Swift.String]) -> Swift.Void)
  public func addChannelRole(param: NECoreQChatKit.AddChannelRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelRole?) -> Swift.Void)
  public func removeChannelRole(param: NECoreQChatKit.RemoveChannelRoleParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getChannelRoles(param: NECoreQChatKit.ChannelRoleParam, _ completion: @escaping (Foundation.NSError?, [NECoreQChatKit.ChannelRole]?) -> Swift.Void)
  public func getExistingChannelRoles(param: NECoreQChatKit.GetExistingChannelRolesByServerRoleIdsParam, _ completion: @escaping (Foundation.NSError?, [NECoreQChatKit.ChannelRole]?) -> Swift.Void)
  public func getMemberRoles(param: NECoreQChatKit.GetMemberRolesParam, _ completion: @escaping (Foundation.NSError?, [NECoreQChatKit.MemberRole]?) -> Swift.Void)
  public func updateChannelRole(param: NECoreQChatKit.UpdateChannelRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.ChannelRole?) -> Swift.Void)
  public func getServerRolesByAccId(param: NECoreQChatKit.GetServerRolesByAccIdParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerRole]?) -> Swift.Void)
  public func getExistingServerRolesByAccids(param: NECoreQChatKit.QChatGetExistingAccidsInServerRoleParam, _ completion: @escaping (Foundation.NSError?, [Swift.String : [NECoreQChatKit.ServerRole]]?) -> Swift.Void)
  public func addMemberRole(_ param: NECoreQChatKit.AddMemberRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.MemberRole?) -> Swift.Void)
  public func removeMemberRole(param: NECoreQChatKit.RemoveMemberRoleParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func removeServerRoleMember(param: NIMQChatRemoveServerRoleMemberParam, _ completion: @escaping (Swift.Error?, NIMQChatRemoveServerRoleMembersResult?) -> Swift.Void)
  public func updateMemberRole(param: NECoreQChatKit.UpdateMemberRoleParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.MemberRole?) -> Swift.Void)
  @objc public func checkPermission(param: NIMQChatCheckPermissionParam, complete: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getExistingMemberRoles(param: NECoreQChatKit.GetExistingAccidsOfMemberRolesParam, _ completion: @escaping (Foundation.NSError?, [NECoreQChatKit.MemberRole]?) -> Swift.Void)
  public func getExistingServerRoleMembersByAccids(_ param: NECoreQChatKit.GetExistingServerRoleMembersByAccidsParam, _ completion: @escaping (Swift.Error?, [Swift.String]) -> Swift.Void)
  public func addDelegate(delegate: NECoreQChatKit.QChatRoleProviderDelegate)
  public func removeDelegate(delegate: NECoreQChatKit.QChatRoleProviderDelegate)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class QChatServer : ObjectiveC.NSObject {
  public var serverId: Swift.UInt64?
  public var appId: ObjectiveC.NSInteger?
  @objc public var name: Swift.String?
  @objc public var icon: Swift.String?
  @objc public var custom: Swift.String?
  @objc public var owner: Swift.String?
  public var memberNumber: ObjectiveC.NSInteger?
  public var inviteMode: NECoreQChatKit.QChatServerInviteMode?
  public var applyMode: NECoreQChatKit.QChatServerApplyMode?
  public var validFlag: Swift.Bool?
  public var createTime: Foundation.TimeInterval?
  public var updateTime: Foundation.TimeInterval?
  @objc public var hasUnread: Swift.Bool
  @objc public var unreadCount: Swift.UInt
  @objc public var isVisitorMode: Swift.Bool
  @objc public var topic: Swift.String?
  @objc public var announce: NECoreQChatKit.NEAnnounceModel?
  @objc public init(server: NIMQChatServer?)
  @objc public func copyFromModel(server: NECoreQChatKit.QChatServer?)
  public func convertUpdateServerParam() -> NECoreQChatKit.UpdateServerParam?
  @objc deinit
}
public protocol QChatServerProviderDelegate : ObjectiveC.NSObjectProtocol {
  func callBack()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatServerProvider : ObjectiveC.NSObject, NIMQChatServerManagerDelegate {
  @objc public static let shared: NECoreQChatKit.QChatServerProvider
  public func createServer(param: NECoreQChatKit.CreateServerParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.CreateServerResult?) -> Swift.Void)
  public func getServers(param: NECoreQChatKit.QChatGetServersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServersResult?) -> Swift.Void)
  public func getServerCount(param: NECoreQChatKit.GetServersByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.GetServersByPageResult?) -> Swift.Void)
  public func applyServerJoin(param: NECoreQChatKit.QChatApplyServerJoinParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getServerMembers(param: NECoreQChatKit.QChatGetServerMembersParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServerMembersResult?) -> Swift.Void)
  public func getServerMembersByPage(param: NECoreQChatKit.QChatGetServerMembersByPageParam, _ completion: @escaping (Foundation.NSError?, NECoreQChatKit.QChatGetServerMembersResult?) -> Swift.Void)
  public func inviteMembersToServer(param: NECoreQChatKit.QChatInviteServerMembersParam, _ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func inviteMembersToServerWithResult(param: NECoreQChatKit.QChatInviteServerMembersParam, _ completion: @escaping (Foundation.NSError?, [Swift.String]?, [Swift.String]?) -> Swift.Void)
  public func updateServer(_ param: NECoreQChatKit.UpdateServerParam, _ completion: @escaping (Swift.Error?, NIMQChatUpdateServerResult?) -> Swift.Void)
  @objc public func deleteServer(_ serverid: Swift.UInt64, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func leaveServer(_ serverId: Swift.UInt64?, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func getServerMembers(_ param: NECoreQChatKit.GetServerMembersByPageParam, _ completion: @escaping (Swift.Error?, [NECoreQChatKit.ServerMemeber]) -> Swift.Void)
  @objc public func getServerMembers(param: NIMQChatGetServerMembersParam, _ completion: @escaping (Swift.Error?, [NIMQChatServerMember]?) -> Swift.Void)
  public func updateMyServerMember(_ param: NECoreQChatKit.UpdateMyMemberInfoParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerMemeber) -> Swift.Void)
  public func updateServerMember(_ param: NECoreQChatKit.UpdateServerMemberInfoParam, _ completion: @escaping (Swift.Error?, NECoreQChatKit.ServerMemeber) -> Swift.Void)
  public func kickoutServerMembers(_ param: NECoreQChatKit.KickServerMembersParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func enterAsVisitor(_ param: NIMQChatEnterServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatEnterServerAsVisitorResult?) -> Swift.Void)
  @objc public func leaveAsVisitor(_ param: NIMQChatLeaveServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatLeaveServerAsVisitorResult?) -> Swift.Void)
  @objc public func subscribeAsVisitor(_ param: NIMQChatSubscribeServerAsVisitorParam, _ completion: @escaping (Swift.Error?, NIMQChatSubscribeServerAsVisitorResult?) -> Swift.Void)
  public func addDelegate(delegate: NECoreQChatKit.QChatServerProviderDelegate)
  public func removeDelegate(delegate: NECoreQChatKit.QChatServerProviderDelegate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QChatSystemMessageProvider : ObjectiveC.NSObject {
  @objc public static let shared: NECoreQChatKit.QChatSystemMessageProvider
  @objc public func sendMessage(message: NIMQChatMessage, session: NIMSession, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public func getMessageHistory(param: NECoreQChatKit.GetMessageHistoryParam, _ completion: @escaping (Swift.Error?, [NIMQChatMessage]?) -> Swift.Void)
  @objc public func getLocalMessage(param: NIMQChatGetMessageCacheParam, completion: @escaping (Swift.Error?, [NIMQChatMessage]?) -> Swift.Void)
  public func markMessageRead(param: NECoreQChatKit.MarkMessageReadParam, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func addDelegate(delegate: NIMQChatMessageManagerDelegate)
  @objc public func removeDelegate(delegate: NIMQChatMessageManagerDelegate)
  @objc deinit
}
public struct RemoveChannelRoleParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public init()
  public func toImParam() -> NIMQChatRemoveChannelRoleParam
}
public struct RemoveMemberRoleParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var accid: Swift.String?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, accid: Swift.String?)
  public func toIMParam() -> NIMQChatRemoveMemberRoleParam
}
public struct RoleMember {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var accid: Swift.String?
  public var createTime: Swift.Double?
  public var updateTime: Swift.Double?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public var custom: Swift.String?
  public var type: NECoreQChatKit.ServerMemberType?
  public var jointime: Swift.Double?
  public var inviter: Swift.String?
  public init(_ member: NIMQChatServerRoleMember)
  public func convertToServerMember() -> NECoreQChatKit.ServerMemeber
}
public enum status : Swift.Int {
  case Deny, Extend, Allow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct RoleStatusInfo {
  public var customType: Swift.Int
  public var type: NECoreQChatKit.ChatPermissionType?
  public var status: NECoreQChatKit.status
  public init(customtype: Swift.Int = 0, type: NECoreQChatKit.ChatPermissionType? = nil, status: NECoreQChatKit.status = .Extend)
}
public enum ServerMemberType {
  case common
  case owner
  public static func == (a: NECoreQChatKit.ServerMemberType, b: NECoreQChatKit.ServerMemberType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GetServerMembersByPageParam {
  public var serverId: Swift.UInt64?
  public var timeTag: Swift.Double?
  public var limit: Swift.Int?
  public init()
}
public struct AddServerRoleMemberParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var accountArray: [Swift.String]?
  public init()
}
public struct ServerMemeber : Swift.Equatable {
  public var serverId: Swift.UInt64?
  public var appId: Swift.Int?
  public var accid: Swift.String?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public var inviter: Swift.String?
  public var custom: Swift.String?
  public var type: NECoreQChatKit.ServerMemberType?
  public var joinTime: Swift.Double?
  public var validFlag: Swift.Bool?
  public var createTime: Swift.Double?
  public var updateTime: Swift.Double?
  public var imName: Swift.String
  public var roles: [NECoreQChatKit.ServerRole]?
  public init(_ member: NIMQChatServerMember?)
  public init()
  public static func == (lhs: NECoreQChatKit.ServerMemeber, rhs: NECoreQChatKit.ServerMemeber) -> Swift.Bool
}
public struct ServerRole {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var name: Swift.String?
  public var type: NECoreQChatKit.channelRoleType?
  public var icon: Swift.String?
  public var ext: Swift.String?
  public var auths: [NECoreQChatKit.StatusInfo]?
  public var channelAuths: [NECoreQChatKit.RoleStatusInfo]?
  public var createTime: Foundation.TimeInterval?
  public var updateTime: Foundation.TimeInterval?
  public var memberCount: Swift.Int?
  public var priority: Swift.Int?
  public init(_ role: NIMQChatServerRole?)
}
public enum ServerRoleType {
  case everyone
  case custom
  public static func == (a: NECoreQChatKit.ServerRoleType, b: NECoreQChatKit.ServerRoleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeleteServerRoleParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public init()
}
public struct GetMemberRolesParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var limit: Swift.Int?
  public var timeTag: Swift.Double?
  public init()
}
public struct GetServerRoleParam {
  public var serverId: Swift.UInt64?
  public var limit: Swift.Int?
  public var priority: Swift.Int?
  public init()
}
public struct UpdateServerRolePriorityItem {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var priority: Swift.Int
  public init(_ role: NECoreQChatKit.ServerRole, _ pri: Swift.Int)
}
public struct UpdateServerRolePrioritiesParam {
  public var serverId: Swift.UInt64?
  public var updateItems: [NECoreQChatKit.UpdateServerRolePriorityItem]?
  public init()
}
public struct ServerRoleParam {
  public var serverId: Swift.UInt64?
  public var name: Swift.String?
  public var type: NECoreQChatKit.ServerRoleType?
  public var icon: Swift.String?
  public var ext: Swift.String?
  public init()
}
public enum ChatPermissionType : Swift.String {
  case manageServer
  case manageChannel
  case manageRole
  case sendMsg
  case modifySelfInfo
  case inviteToServer
  case kickOthersInServer
  case modifyOthersInfoInServer
  case revokeMsg
  case deleteOtherMsg
  case remindOther
  case remindAll
  case manageBlackWhiteList
  case none
  public func convertQCathPermissionType() -> NIMQChatPermissionType?
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StatusInfo {
  public var customType: Swift.Int?
  public var permissionType: NECoreQChatKit.ChatPermissionType?
  public var status: NECoreQChatKit.status
  public init()
}
extension NECoreQChatKit.status {
  public func convertQChtaType() -> NIMQChatPermissionStatus
}
public struct UpdateServerRoleParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var name: Swift.String?
  public var icon: Swift.String?
  public var ext: Swift.String?
  public var commands: [NECoreQChatKit.StatusInfo]?
  public var priority: Swift.Int?
  public init()
}
public struct GetServerRoleMembersParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var timeTag: Swift.Double?
  public var accid: Swift.String?
  public var limit: Swift.Int?
  public init()
}
public struct GetExistingServerRoleMembersByAccidsParam {
  public var serverId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var accids: [Swift.String]?
  public init()
  public func toImParam() -> NIMQChatGetExistingServerRoleMembersByAccidsParam
}
public enum RoleType {
  case white
  case black
  public static func == (a: NECoreQChatKit.RoleType, b: NECoreQChatKit.RoleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum QChatOperationType {
  case add
  case remove
  public static func == (a: NECoreQChatKit.QChatOperationType, b: NECoreQChatKit.QChatOperationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UpdateChannelBlackWhiteMembersParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var type: NECoreQChatKit.RoleType?
  public var opeType: NECoreQChatKit.QChatOperationType?
  public var accids: [Swift.String]?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, type: NECoreQChatKit.RoleType?, opeType: NECoreQChatKit.QChatOperationType?, accids: [Swift.String]?)
  public func toIMParam() -> NIMQChatUpdateChannelBlackWhiteMembersParam
}
public struct UpdateChannelParam {
  public var channelId: Swift.UInt64?
  public var name: Swift.String?
  public var topic: Swift.String?
  public var custom: Swift.String?
  public init(channelId: Swift.UInt64?)
  public func toIMParam() -> NIMQChatUpdateChannelParam
}
public struct UpdateChannelRoleParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var roleId: Swift.UInt64?
  public var commands: [NECoreQChatKit.RoleStatusInfo]?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, roleId: Swift.UInt64?, commands: [NECoreQChatKit.RoleStatusInfo]?)
  public func toIMParam() -> NIMQChatUpdateChannelRoleParam
}
public struct UpdateMemberRoleParam {
  public var serverId: Swift.UInt64?
  public var channelId: Swift.UInt64?
  public var accid: Swift.String?
  public var commands: [NECoreQChatKit.RoleStatusInfo]?
  public init(serverId: Swift.UInt64?, channelId: Swift.UInt64?, accid: Swift.String?, commands: [NECoreQChatKit.RoleStatusInfo]?)
  public func toIMParam() -> NIMQChatUpdateMemberRoleParam
}
public struct UpdateServerMemberInfoParam {
  public var serverId: Swift.UInt64?
  public var accid: Swift.String?
  public var nick: Swift.String?
  public var avatar: Swift.String?
  public init()
}
public struct UpdateServerParam {
  public var serverId: Swift.UInt64?
  public var name: Swift.String?
  public var icon: Swift.String?
  public var custom: Swift.String?
  public var inviteMode: NECoreQChatKit.QChatServerInviteMode?
  public var applyMode: NECoreQChatKit.QChatServerApplyMode?
  public init(name: Swift.String?, icon: Swift.String?)
  public func toImParam() -> NIMQChatUpdateServerParam
}
extension NECoreQChatKit.channelRoleType : Swift.Equatable {}
extension NECoreQChatKit.channelRoleType : Swift.Hashable {}
extension NECoreQChatKit.ChannelType : Swift.Equatable {}
extension NECoreQChatKit.ChannelType : Swift.Hashable {}
extension NECoreQChatKit.ChannelType : Swift.RawRepresentable {}
extension NECoreQChatKit.ChannelVisibleType : Swift.Equatable {}
extension NECoreQChatKit.ChannelVisibleType : Swift.Hashable {}
extension NECoreQChatKit.QChatServerInviteMode : Swift.Equatable {}
extension NECoreQChatKit.QChatServerInviteMode : Swift.Hashable {}
extension NECoreQChatKit.QChatServerApplyMode : Swift.Equatable {}
extension NECoreQChatKit.QChatServerApplyMode : Swift.Hashable {}
extension NECoreQChatKit.ChannelMemberRoleType : Swift.Equatable {}
extension NECoreQChatKit.ChannelMemberRoleType : Swift.Hashable {}
extension NECoreQChatKit.LoginAuthType : Swift.Equatable {}
extension NECoreQChatKit.LoginAuthType : Swift.Hashable {}
extension NECoreQChatKit.LoginAuthType : Swift.RawRepresentable {}
extension NECoreQChatKit.QChatServerMemberType : Swift.Equatable {}
extension NECoreQChatKit.QChatServerMemberType : Swift.Hashable {}
extension NECoreQChatKit.status : Swift.Equatable {}
extension NECoreQChatKit.status : Swift.Hashable {}
extension NECoreQChatKit.status : Swift.RawRepresentable {}
extension NECoreQChatKit.ServerMemberType : Swift.Equatable {}
extension NECoreQChatKit.ServerMemberType : Swift.Hashable {}
extension NECoreQChatKit.ServerRoleType : Swift.Equatable {}
extension NECoreQChatKit.ServerRoleType : Swift.Hashable {}
extension NECoreQChatKit.ChatPermissionType : Swift.Equatable {}
extension NECoreQChatKit.ChatPermissionType : Swift.Hashable {}
extension NECoreQChatKit.ChatPermissionType : Swift.RawRepresentable {}
extension NECoreQChatKit.RoleType : Swift.Equatable {}
extension NECoreQChatKit.RoleType : Swift.Hashable {}
extension NECoreQChatKit.QChatOperationType : Swift.Equatable {}
extension NECoreQChatKit.QChatOperationType : Swift.Hashable {}
