// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NEConversationUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import NEChatKit
@_exported import NECommonKit
@_exported import NECommonUIKit
@_exported import NEConversationUIKit
@_exported import NECoreIMKit
@_exported import NECoreKit
@_exported import NIMSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension UIKit.UIColor {
  public static let ne_darkText: UIKit.UIColor
  public static let ne_greyText: UIKit.UIColor
  public static let ne_lightText: UIKit.UIColor
  public static let ne_blueText: UIKit.UIColor
  public static let ne_redText: UIKit.UIColor
  public static let ne_disableRedText: UIKit.UIColor
  public static let ne_backcolor: UIKit.UIColor
  public static let ne_emptyTitleColor: UIKit.UIColor
  public static let ne_lightBackgroundColor: UIKit.UIColor
  public static let ne_defautAvatarColor: UIKit.UIColor
  public static let ne_greenColor: UIKit.UIColor
  public static let ne_borderColor: UIKit.UIColor
  public static let ne_greyLine: UIKit.UIColor
  public static let ne_redColor: UIKit.UIColor
}
public let ModuleName: Swift.String
public var inviteNumberLimit: Swift.Int
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ConversationController : NEConversationUIKit.NEBaseConversationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @objc deinit
}
extension UIKit.UIImage {
  public class func ne_imageNamed(name: Swift.String?) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ConversationListCell : NEConversationUIKit.NEBaseConversationListCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func configData(sessionModel: NEChatKit.ConversationListModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ConversationSearchCell : NEConversationUIKit.NEBaseConversationSearchCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class SearchSessionHeaderView : NECommonUIKit.SearchSessionBaseView {
  @_Concurrency.MainActor(unsafe) @objc override open func setupUI()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ConversationSearchController : NEConversationUIKit.NEBaseConversationSearchController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationSearchViewModel : ObjectiveC.NSObject {
  public var searchResult: (friend: [NEChatKit.ConversationSearchListModel], contactGroup: [NEChatKit.ConversationSearchListModel], seniorGroup: [NEChatKit.ConversationSearchListModel])?
  @objc override dynamic public init()
  public func doSearch(searchStr: Swift.String, _ completion: @escaping (Foundation.NSError?, (friend: [NEChatKit.ConversationSearchListModel], contactGroup: [NEChatKit.ConversationSearchListModel], seniorGroup: [NEChatKit.ConversationSearchListModel])?) -> Swift.Void)
  @objc deinit
}
@objc public enum NEConversationAvatarType : Swift.Int {
  case rectangle = 1
  case cycle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationUIConfig : ObjectiveC.NSObject {
  @objc public var showTitleBar: Swift.Bool
  @objc public var showTitleBarLeftIcon: Swift.Bool
  @objc public var showTitleBarRight2Icon: Swift.Bool
  @objc public var showTitleBarRightIcon: Swift.Bool
  @objc public var titleBarLeftRes: UIKit.UIImage?
  @objc public var titleBarRightRes: UIKit.UIImage?
  @objc public var titleBarRight2Res: UIKit.UIImage?
  @objc public var titleBarTitle: Swift.String?
  @objc public var titleBarTitleColor: UIKit.UIColor?
  @objc public var conversationProperties: NEConversationUIKit.ConversationProperties
  @objc public var stickTopBottonTitle: Swift.String
  @objc public var stickTopBottonCancelTitle: Swift.String
  @objc public var stickTopBottonBackgroundColor: UIKit.UIColor?
  @objc public var stickTopBottonClick: ((NEChatKit.ConversationListModel?, Foundation.IndexPath) -> Swift.Void)?
  @objc public var deleteBottonTitle: Swift.String
  @objc public var deleteBottonBackgroundColor: UIKit.UIColor?
  @objc public var deleteBottonClick: ((NEChatKit.ConversationListModel?, Foundation.IndexPath) -> Swift.Void)?
  @objc public var titleBarLeftClick: (() -> Swift.Void)?
  @objc public var titleBarRightClick: (() -> Swift.Void)?
  @objc public var titleBarRight2Click: (() -> Swift.Void)?
  @objc public var itemClick: ((NEChatKit.ConversationListModel?, Foundation.IndexPath) -> Swift.Void)?
  @objc public var customController: ((NEConversationUIKit.NEBaseConversationController) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationProperties : ObjectiveC.NSObject {
  @objc public var avatarCornerRadius: Swift.Double
  public var avatarType: NEConversationUIKit.NEConversationAvatarType?
  @objc public var itemBackground: UIKit.UIColor?
  @objc public var itemStickTopBackground: UIKit.UIColor?
  @objc public var itemTitleSize: CoreFoundation.CGFloat
  @objc public var itemContentSize: CoreFoundation.CGFloat
  @objc public var itemDateSize: CoreFoundation.CGFloat
  @objc public var itemTitleColor: UIKit.UIColor
  @objc public var itemContentColor: UIKit.UIColor
  @objc public var itemDateColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ConversationViewModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didAddRecentSession()
  @objc func didUpdateRecentSession(index: Swift.Int)
  @objc func reloadData()
  @objc func reloadTableView()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationViewModel : ObjectiveC.NSObject, NEChatKit.ConversationRepoDelegate, NIMConversationManagerDelegate, NIMTeamManagerDelegate, NIMUserManagerDelegate, NIMChatManagerDelegate {
  @objc public var conversationListArray: [NEChatKit.ConversationListModel]?
  @objc public var stickTopInfos: [NIMSession : NIMStickTopSessionInfo]
  @objc weak public var delegate: NEConversationUIKit.ConversationViewModelDelegate?
  @objc final public let repo: NEChatKit.ConversationRepo
  @objc override dynamic public init()
  @objc public func fetchServerSessions(option: NIMFetchServerSessionOption, _ completion: @escaping (Foundation.NSError?, [NEChatKit.ConversationListModel]?) -> Swift.Void)
  @objc public func deleteRecentSession(recentSession: NIMRecentSession)
  @objc public func stickTopInfoForSession(session: NIMSession) -> NIMStickTopSessionInfo?
  @objc public func addStickTopSession(session: NIMSession, _ completion: @escaping (Foundation.NSError?, NIMStickTopSessionInfo?) -> Swift.Void)
  @objc public func removeStickTopSession(params: NIMStickTopSessionInfo, _ completion: @escaping (Foundation.NSError?, NIMStickTopSessionInfo?) -> Swift.Void)
  @objc public func loadStickTopSessionInfos(_ completion: @escaping (Foundation.NSError?, [NIMSession : NIMStickTopSessionInfo]?) -> Swift.Void)
  @objc public func notifyForNewMsg(userId: Swift.String?) -> Swift.Bool
  @objc public func notifyStateForNewMsg(teamId: Swift.String?) -> NIMTeamNotifyState
  @objc deinit
  @objc public func sortRecentSession()
  @objc public func onRecvMessageReceipts(_ receipts: [NIMMessageReceipt])
  @objc public func onNotifyAddStickTopSession(_ newInfo: NIMStickTopSessionInfo)
  @objc public func onNotifyRemoveStickTopSession(_ removedInfo: NIMStickTopSessionInfo)
  @objc public func onNotifySyncStickTopSessions(_ response: NIMSyncStickTopSessionResponse)
  @objc public func didServerSessionUpdated(_ recentSession: NIMRecentSession?)
  @objc public func didAdd(_ recentSession: NIMRecentSession, totalUnreadCount: Swift.Int)
  @objc public func didUpdate(_ recentSession: NIMRecentSession, totalUnreadCount: Swift.Int)
  @objc public func didRemove(_ recentSession: NIMRecentSession, totalUnreadCount: Swift.Int)
  @objc public func onFriendChanged(_ user: NIMUser)
  @objc public func onTeamUpdated(_ team: NIMTeam)
  @objc public func onTeamAdded(_ team: NIMTeam)
  @objc public func onTeamRemoved(_ team: NIMTeam)
  @objc public func onTeamMemberChanged(_ team: NIMTeam)
  @objc public func onMuteListChanged()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunConversationController : NEConversationUIKit.NEBaseConversationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public var searchView: NECommonUIKit.FunSearchView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func getPopListItems() -> [NEConversationUIKit.PopListItem]
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunConversationListCell : NEConversationUIKit.NEBaseConversationListCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func configData(sessionModel: NEChatKit.ConversationListModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NEConversationUIKit.ConversationRouter {
  @objc public static func registerFun()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunConversationSearchCell : NEConversationUIKit.NEBaseConversationSearchCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunConversationSearchController : NEConversationUIKit.NEBaseConversationSearchController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func setupSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FunPopListViewController : NEConversationUIKit.NEBasePopListViewController {
  @objc @_Concurrency.MainActor(unsafe) public var triangleView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let atAllKey: Swift.String
public let yxAitMsg: Swift.String
public let AtMessageChangeNoti: Swift.String
@objc @_inheritsConvenienceInitializers @objcMembers public class AtMessageModel : ObjectiveC.NSObject {
  @objc public var messageId: Swift.String?
  @objc public var messageTime: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AtMEMessageRecord : ObjectiveC.NSObject {
  @objc public var atMessages: [Swift.String : Foundation.NSNumber]
  @objc public var lastTime: Foundation.NSNumber?
  @objc public var isRead: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class NEAtMessageManager : ObjectiveC.NSObject, NIMChatManagerDelegate, NIMLoginManagerDelegate {
  @objc public static var instance: NEConversationUIKit.NEAtMessageManager?
  @objc deinit
  @objc public static func setupInstance()
  @objc public func onLogin(_ step: NIMLoginStep)
  @objc public func onRecvRevokeMessageNotification(_ notification: NIMRevokeMessageNotification)
  @objc public func isAtCurrentUser(sessionId: Swift.String) -> Swift.Bool
  @objc public func clearAtRecord(_ sessionId: Swift.String)
  @objc public func filterAtMessage(messages: [NIMMessage])
  @objc public func removeRevokeAtMessage(messages: [NIMMessage])
  @objc public func startFilterRoamingMessagesTask()
  @objc public func onRecvMessages(_ messages: [NIMMessage])
}
@objc public protocol NEBaseConversationControllerDelegate {
  @objc func onDataLoaded()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseConversationController : UIKit.UIViewController, NIMChatManagerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var deleteBottonBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var brokenNetworkViewHeight: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var contentViewTopAnchor: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var topConstant: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var popListController: NEConversationUIKit.NEBasePopListViewController
  @objc @_Concurrency.MainActor(unsafe) public var delegate: NEConversationUIKit.NEBaseConversationControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var bodyTopViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyBottomViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var cellRegisterDic: [Swift.Int : NEConversationUIKit.NEBaseConversationListCell.Type]
  @objc @_Concurrency.MainActor(unsafe) final public let viewModel: NEConversationUIKit.ConversationViewModel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func showTitleBar()
  @objc @_Concurrency.MainActor(unsafe) open func setupSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func initialConfig()
  @objc @_Concurrency.MainActor(unsafe) public var navigationView: NECommonUIKit.TabNavigationView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyTopView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var brokenNetworkView: NECommonUIKit.NEBrokenNetworkView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: NECommonUIKit.NEEmptyDataView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bodyBottomView: UIKit.UIView {
    @objc get
    @objc set
  }
}
extension NEConversationUIKit.NEBaseConversationController : NECommonUIKit.TabNavigationViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchAction()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func getPopListController() -> NEConversationUIKit.NEBasePopListViewController
  @objc @_Concurrency.MainActor(unsafe) dynamic open func getPopListItems() -> [NEConversationUIKit.PopListItem]
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didClickAddBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func createDiscussGroup()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func createSeniorGroup()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func onRecvRevokeMessageNotification(_ notification: NIMRevokeMessageNotification)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func saveRevokeMessage(_ message: NIMMessage, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension NEConversationUIKit.NEBaseConversationController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @objc @_Concurrency.MainActor(unsafe) dynamic open func deleteActionHandler(action: UIKit.UITableViewRowAction?, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func topActionHandler(action: UIKit.UITableViewRowAction?, indexPath: Foundation.IndexPath, isTop: Swift.Bool)
}
extension NEConversationUIKit.NEBaseConversationController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onselectedTableRow(sessionType: NIMSessionType, sessionId: Swift.String, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didDeleteConversationCell(model: NEChatKit.ConversationListModel, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didRemoveStickTopSession(model: NEChatKit.ConversationListModel, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didAddStickTopSession(model: NEChatKit.ConversationListModel, indexPath: Foundation.IndexPath)
}
extension NEConversationUIKit.NEBaseConversationController : NEConversationUIKit.ConversationViewModelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didAddRecentSession()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didUpdateRecentSession(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func reloadData()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func reloadTableView()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseConversationListCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var topStickInfos: [NIMSession : NIMStickTopSessionInfo]
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configData(sessionModel: NEChatKit.ConversationListModel?)
  @objc @_Concurrency.MainActor(unsafe) open func contentForRecentSession(message: NIMMessage) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var headImge: NECommonUIKit.NEUserHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var redAngleView: NECommonUIKit.RedAngleLabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var title: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var subTitle: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var notifyMsg: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseConversationNavigationController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let navigationView: NECommonUIKit.NENavigationView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setupBackUI()
  @objc @_Concurrency.MainActor(unsafe) open func backEvent()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class ConversationRouter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseConversationSearchCell : NECommonUIKit.TextBaseCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public var searchModel: NEChatKit.ConversationSearchListModel? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var searchText: Swift.String {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBaseConversationSearchController : NEConversationUIKit.NEBaseConversationNavigationController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func initialConfig()
  @objc @_Concurrency.MainActor(unsafe) open func setupSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func searchTextFieldChange(textfield: NECommonUIKit.SearchTextField)
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var searchTextField: NECommonUIKit.SearchTextField {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: NECommonUIKit.NEEmptyDataView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PopListItem : ObjectiveC.NSObject {
  public typealias PopListClick = () -> Swift.Void
  @objc public var image: UIKit.UIImage?
  @objc public var showName: Swift.String?
  @objc public var showNameColor: UIKit.UIColor
  @objc public var completion: NEConversationUIKit.PopListItem.PopListClick?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class NEBasePopListViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let shadowView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var buttonHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var popViewWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var popViewRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var topConstant: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var itemDatas: [NEConversationUIKit.PopListItem] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func removeSelf()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NEKitConversationConfig : ObjectiveC.NSObject {
  @objc public static let shared: NEConversationUIKit.NEKitConversationConfig
  @objc public var ui: NEConversationUIKit.ConversationUIConfig
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NEMessageUtil {
  public class func messageContent(message: NIMMessage) -> Swift.String
  @objc deinit
}
extension NEConversationUIKit.ConversationRouter {
  @objc public static func register()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PopListViewController : NEConversationUIKit.NEBasePopListViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NEConversationUIKit.NEConversationAvatarType : Swift.Equatable {}
extension NEConversationUIKit.NEConversationAvatarType : Swift.Hashable {}
extension NEConversationUIKit.NEConversationAvatarType : Swift.RawRepresentable {}
